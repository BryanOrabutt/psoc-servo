FILE: .\boot.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#895 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.18
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0002: 30       HALT                     
0003: 30       HALT                     
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0005: 30       HALT                     
0006: 30       HALT                     
0007: 30       HALT                     
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
0009: 30       HALT                     
000A: 30       HALT                     
000B: 30       HALT                     
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0129)     // call	void_handler
000D: 30       HALT                     
000E: 30       HALT                     
000F: 30       HALT                     
0010: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0133)     // call	void_handler
0011: 30       HALT                     
0012: 30       HALT                     
0013: 30       HALT                     
0014: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   18h                      ;VC3 Interrupt Vector
                                        (0137)     // call	void_handler
0015: 30       HALT                     
0016: 30       HALT                     
0017: 30       HALT                     
0018: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0141)     // call	void_handler
0019: 30       HALT                     
001A: 30       HALT                     
001B: 30       HALT                     
001C: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0145)     // call	void_handler
001D: 30       HALT                     
001E: 30       HALT                     
001F: 30       HALT                     
0020: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0021: 30       HALT                     
0022: 30       HALT                     
0023: 30       HALT                     
0024: 7D 07 2B LJMP  0x072B             (0149)     ljmp	_Motor1_ISR
0027: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0153)     // call	void_handler
0028: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
0029: 30       HALT                     
002A: 30       HALT                     
002B: 30       HALT                     
002C: 7D 06 CE LJMP  0x06CE             (0157)     ljmp	_Motor2_ISR
002F: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0161)     // call	void_handler
0030: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0031: 30       HALT                     
0032: 30       HALT                     
0033: 30       HALT                     
0034: 7D 06 71 LJMP  0x0671             (0165)     ljmp	_Motor3_ISR
0037: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 04 11 LJMP  0x0411             (0169)     ljmp	_UART_TX_ISR
003B: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 04 12 LJMP  0x0412             (0173)     ljmp	_UART_RX_ISR
003F: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0177)     // call	void_handler
0040: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0181)     // call	void_handler
0041: 30       HALT                     
0042: 30       HALT                     
0043: 30       HALT                     
0044: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0185)     // call	void_handler
0045: 30       HALT                     
0046: 30       HALT                     
0047: 30       HALT                     
0048: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0189)     // call	void_handler
0049: 30       HALT                     
004A: 30       HALT                     
004B: 30       HALT                     
004C: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0193)     // call	void_handler
004D: 30       HALT                     
004E: 30       HALT                     
004F: 30       HALT                     
0050: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0197)     // call	void_handler
0051: 30       HALT                     
0052: 30       HALT                     
0053: 30       HALT                     
0054: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0201)     // call	void_handler
0055: 30       HALT                     
0056: 30       HALT                     
0057: 30       HALT                     
0058: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0205)     // call	void_handler
0059: 30       HALT                     
005A: 30       HALT                     
005B: 30       HALT                     
005C: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0209)     // call	void_handler
005D: 30       HALT                     
005E: 30       HALT                     
005F: 30       HALT                     
0060: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0213)     // call	void_handler
0061: 30       HALT                     
0062: 30       HALT                     
0063: 30       HALT                     
0064: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  Start of Execution.
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0220) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0221) ;
                                        (0222) 
                                        (0223) IF	(TOOLCHAIN & HITECH)
                                        (0224)  	AREA PD_startup(CODE, REL, CON)
                                        (0225) ELSE
                                        (0226)     org 68h
                                        (0227) ENDIF
                                        (0228) __Start:
                                        (0229) 
                                        (0230)     ; initialize SMP values for voltage stabilization, if required,
                                        (0231)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0232)     ; least for now. 
                                        (0233)     ;
0065: 30       HALT                     
0066: 30       HALT                     
0067: 30       HALT                     
0068: 71 10    OR    F,0x10             (0234)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0235)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0236)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             (0237)     M8C_SetBank0
                                        (0238) 
                                        (0239)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0240)     mov   A, 20h
0074: 28       ROMX                     (0241)     romx
0075: 50 40    MOV   A,0x40             (0242)     mov   A, 40h
0077: 28       ROMX                     (0243)     romx
0078: 50 60    MOV   A,0x60             (0244)     mov   A, 60h
007A: 28       ROMX                     (0245)     romx
                                        (0246)     ; %45%20%46%46% End workaround
                                        (0247) 
                                        (0248) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0249)     M8C_EnableWatchDog
                                        (0250) ENDIF
                                        (0251) 
                                        (0252) IF ( SELECT_32K )
                                        (0253)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0254) ELSE
007B: 41 FE FB AND   REG[0xFE],0xFB     (0255)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0256) ENDIF
                                        (0257) 
                                        (0258)     ;---------------------------
                                        (0259)     ; Set up the Temporary stack
                                        (0260)     ;---------------------------
                                        (0261)     ; A temporary stack is set up for the SSC instructions.
                                        (0262)     ; The real stack start will be assigned later.
                                        (0263)     ;
                                        (0264) _stack_start:          equ 80h
007E: 50 80    MOV   A,0x80             (0265)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0080: 4E       SWAP  SP,A               (0266)     swap  SP, A                    ; This is only temporary if going to LMM
                                        (0267) 
                                        (0268)     ;-----------------------------------------------
                                        (0269)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0270)     ;-----------------------------------------------
                                        (0271) 
                                        (0272) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0273)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0274)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0275)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0276)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0277)   IF ( AGND_BYPASS )
                                        (0278)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0279)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0280)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0281)     ; value using the proper trim values.
                                        (0282)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0283)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0284)   ENDIF
                                        (0285)  ENDIF
                                        (0286) ENDIF ; 5.0 V Operation
                                        (0287) 
                                        (0288) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0289)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0290)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0291)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0292)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0293)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0294)  ENDIF
                                        (0295) ENDIF ; 3.3 Volt Operation
                                        (0296) 
0081: 55 F8 00 MOV   [j+201],0x0        (0297)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0084: 55 F9 00 MOV   [j+202],0x0        (0298)     mov  [bSSC_KEYSP], 0
                                        (0299) 
                                        (0300)     ;---------------------------------------
                                        (0301)     ; Initialize Crystal Oscillator and PLL
                                        (0302)     ;---------------------------------------
                                        (0303) 
                                        (0304) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0305)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0306)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0307)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0308)     ; the ECO to stabilize.
                                        (0309)     ;
                                        (0310)     M8C_SetBank1
                                        (0311)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0312)     M8C_SetBank0
                                        (0313)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0314)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0315)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0316) .WaitFor1s:
                                        (0317)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0318)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0319)                                           ;   since interrupts are not globally enabled
                                        (0320) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0321)     ; Either no ECO, or waiting for stable clock is to be done in main
0087: 71 10    OR    F,0x10             (0322)     M8C_SetBank1
0089: 62 E0 02 MOV   REG[0xE0],0x2      (0323)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
008C: 70 EF    AND   F,0xEF             (0324)     M8C_SetBank0
008E: 62 E3 38 MOV   REG[0xE3],0x38     (0325)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0326) 
                                        (0327) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0328) 
                                        (0329) IF ( PLL_MODE )
                                        (0330)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0331)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0332)     ;
                                        (0333)     M8C_SetBank1
                                        (0334)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0335)     M8C_SetBank0
                                        (0336)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0337)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0338) 
                                        (0339) .WaitFor16ms:
                                        (0340)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0341)     jz   .WaitFor16ms
                                        (0342)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0343)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0344)     M8C_SetBank0
                                        (0345) 
                                        (0346) IF      ( WAIT_FOR_32K )
                                        (0347) ELSE ; !( WAIT_FOR_32K )
                                        (0348)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0349)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0350) ENDIF ;(WAIT_FOR_32K)
                                        (0351) ENDIF ;(PLL_MODE)
                                        (0352) 
                                        (0353)     ;------------------------
                                        (0354)     ; Close CT leakage path.
                                        (0355)     ;------------------------
0091: 62 71 05 MOV   REG[0x71],0x5      (0356)     mov   reg[ACB00CR0], 05h
0094: 62 75 05 MOV   REG[0x75],0x5      (0357)     mov   reg[ACB01CR0], 05h
0097: 62 79 05 MOV   REG[0x79],0x5      (0358)     mov   reg[ACB02CR0], 05h
009A: 62 7D 05 MOV   REG[0x7D],0x5      (0359)     mov   reg[ACB03CR0], 05h
                                        (0360) 
                                        (0361) 
                                        (0362) IF	(TOOLCHAIN & HITECH)
                                        (0363)     ;---------------------------------------------
                                        (0364)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0365)     ;---------------------------------------------
                                        (0366) 	global		__Lstackps
                                        (0367) 	mov     a,low __Lstackps
                                        (0368) 	swap    a,sp
                                        (0369) 
                                        (0370) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0371)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0372)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0373)     RAM_SETPAGE_CUR 0
                                        (0374)     RAM_SETPAGE_MVW 0
                                        (0375)     RAM_SETPAGE_MVR 0
                                        (0376)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0377)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0378)     ELSE
                                        (0379)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0380)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0381) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0382) ELSE
                                        (0383)     ;---------------------------------------------
                                        (0384)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0385)     ;---------------------------------------------
                                        (0386) IF ( SYSTEM_LARGE_MEMORY_MODEL )
009D: 62 D1 07 MOV   REG[0xD1],0x7      (0387)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A0: 50 00    MOV   A,0x0              (0388)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A2: 4E       SWAP  SP,A               (0389)     swap  A, SP
00A3: 62 D3 07 MOV   REG[0xD3],0x7      (0390)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
00A6: 62 D0 00 MOV   REG[0xD0],0x0      (0391)     RAM_SETPAGE_CUR 0
00A9: 62 D5 00 MOV   REG[0xD5],0x0      (0392)     RAM_SETPAGE_MVW 0
00AC: 62 D4 00 MOV   REG[0xD4],0x0      (0393)     RAM_SETPAGE_MVR 0
                                        (0394) 
                                        (0395)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00AF: 71 C0    OR    F,0xC0             (0396)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0397)   ELSE
                                        (0398)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0399)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0400) ELSE
                                        (0401)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0402)     swap  SP, A
                                        (0403) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0404) ENDIF ;	TOOLCHAIN
                                        (0405) 
                                        (0406)     ;-------------------------
                                        (0407)     ; Load Base Configuration
                                        (0408)     ;-------------------------
                                        (0409)     ; Load global parameter settings and load the user modules in the
                                        (0410)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0411)     ; to minimize start up time; (2) We may still need to play with the
                                        (0412)     ; Sleep Timer.
                                        (0413)     ;
00B1: 7C 03 AF LCALL 0x03AF             (0414)     lcall LoadConfigInit
                                        (0415) 
                                        (0416)     ;-----------------------------------
                                        (0417)     ; Initialize C Run-Time Environment
                                        (0418)     ;-----------------------------------
                                        (0419) IF ( C_LANGUAGE_SUPPORT )
                                        (0420) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0421)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0422)     mov  [__r0],<__bss_start
                                        (0423) BssLoop:
                                        (0424)     cmp  [__r0],<__bss_end
                                        (0425)     jz   BssDone
                                        (0426)     mvi  [__r0],A
                                        (0427)     jmp  BssLoop
                                        (0428) BssDone:
                                        (0429)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0430)     mov  X,<__idata_start
                                        (0431)     mov  [__r0],<__data_start
                                        (0432) IDataLoop:
                                        (0433)     cmp  [__r0],<__data_end
                                        (0434)     jz   C_RTE_Done
                                        (0435)     push A
                                        (0436)     romx
                                        (0437)     mvi  [__r0],A
                                        (0438)     pop  A
                                        (0439)     inc  X
                                        (0440)     adc  A,0
                                        (0441)     jmp  IDataLoop
                                        (0442) 
                                        (0443) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0444) 
                                        (0445) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00B4: 62 D0 00 MOV   REG[0xD0],0x0      (0446)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0447)                                        ; to use the Virtual Register page.
                                        (0448) 
                                        (0449)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0450)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0451)     ; text segment and may have been relocated by the Code Compressor.
                                        (0452)     ;
00B7: 50 03    MOV   A,0x3              (0453)     mov   A, >__pXIData                ; Get the address of the flash
00B9: 57 AD    MOV   X,0xAD             (0454)     mov   X, <__pXIData                ;   pointer to the xidata area.
00BB: 08       PUSH  A                  (0455)     push  A
00BC: 28       ROMX                     (0456)     romx                               ; get the MSB of xidata's address
00BD: 53 26    MOV   [__r0],A           (0457)     mov   [__r0], A
00BF: 18       POP   A                  (0458)     pop   A
00C0: 75       INC   X                  (0459)     inc   X
00C1: 09 00    ADC   A,0x0              (0460)     adc   A, 0
00C3: 28       ROMX                     (0461)     romx                               ; get the LSB of xidata's address
00C4: 4B       SWAP  A,X                (0462)     swap  A, X
00C5: 51 26    MOV   A,[__r0]           (0463)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0464)                                        ;   XIData structure list in flash
00C7: 80 04    JMP   0x00CC             (0465)     jmp   .AccessStruct
                                        (0466) 
                                        (0467)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0468)     ; values of C variables. Each structure contains 3 member elements.
                                        (0469)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0470)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0471)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0472)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0473)     ; value in the second member element, an unsigned byte:
                                        (0474)     ; (1) If the value of the second element is non-zero, it represents
                                        (0475)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0476)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0477)     ; the bytes are copied to the block of RAM.
                                        (0478)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0479)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0480)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0481) 
                                        (0482) .AccessNextStructLoop:
00C9: 75       INC   X                  (0483)     inc   X                            ; pXIData++
00CA: 09 00    ADC   A,0x0              (0484)     adc   A, 0
                                        (0485) .AccessStruct:                         ; Entry point for first block
                                        (0486)     ;
                                        (0487)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0488)     ;
00CC: 62 E3 00 MOV   REG[0xE3],0x0      (0489)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00CF: 08       PUSH  A                  (0490)     push  A
00D0: 28       ROMX                     (0491)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D1: 60 D5    MOV   REG[0xD5],A        (0492)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D3: 74       INC   A                  (0493)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00D4: A0 4B    JZ    0x0120             (0494)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00D6: 18       POP   A                  (0495)     pop   A                            ; restore pXIData to [A,X]
00D7: 75       INC   X                  (0496)     inc   X                            ; pXIData++
00D8: 09 00    ADC   A,0x0              (0497)     adc   A, 0
00DA: 08       PUSH  A                  (0498)     push  A
00DB: 28       ROMX                     (0499)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00DC: 53 26    MOV   [__r0],A           (0500)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00DE: 18       POP   A                  (0501)     pop   A                            ; restore pXIData to [A,X]
00DF: 75       INC   X                  (0502)     inc   X                            ; pXIData++ (point to size)
00E0: 09 00    ADC   A,0x0              (0503)     adc   A, 0
00E2: 08       PUSH  A                  (0504)     push  A
00E3: 28       ROMX                     (0505)     romx                               ; Get the size (CPU.A <- *pXIData)
00E4: A0 1C    JZ    0x0101             (0506)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00E6: 53 25    MOV   [__r1],A           (0507)     mov   [__r1], A                    ;             else downcount in __r1
00E8: 18       POP   A                  (0508)     pop   A                            ; restore pXIData to [A,X]
                                        (0509) 
                                        (0510) .CopyNextByteLoop:
                                        (0511)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0512)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0513)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0514)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0515)     ;
00E9: 75       INC   X                  (0516)     inc   X                            ; pXIData++ (point to next data byte)
00EA: 09 00    ADC   A,0x0              (0517)     adc   A, 0
00EC: 08       PUSH  A                  (0518)     push  A
00ED: 28       ROMX                     (0519)     romx                               ; Get the data value (CPU.A <- *pXIData)
00EE: 3F 26    MVI   [__r0],A           (0520)     mvi   [__r0], A                    ; Transfer the data to RAM
00F0: 47 26 FF TST   [__r0],0xFF        (0521)     tst   [__r0], 0xff                 ; Check for page crossing
00F3: B0 06    JNZ   0x00FA             (0522)     jnz   .CopyLoopTail                ;   No crossing, keep going
00F5: 5D D5    MOV   A,REG[0xD5]        (0523)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00F7: 74       INC   A                  (0524)     inc   A
00F8: 60 D5    MOV   REG[0xD5],A        (0525)     mov   reg[ MVW_PP], A
                                        (0526) .CopyLoopTail:
00FA: 18       POP   A                  (0527)     pop   A                            ; restore pXIData to [A,X]
00FB: 7A 25    DEC   [__r1]             (0528)     dec   [__r1]                       ; End of this array in flash?
00FD: BF EB    JNZ   0x00E9             (0529)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00FF: 8F C9    JMP   0x00C9             (0530)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0531) 
                                        (0532) .ClearRAMBlockToZero:
0101: 18       POP   A                  (0533)     pop   A                            ; restore pXIData to [A,X]
0102: 75       INC   X                  (0534)     inc   X                            ; pXIData++ (point to next data byte)
0103: 09 00    ADC   A,0x0              (0535)     adc   A, 0
0105: 08       PUSH  A                  (0536)     push  A
0106: 28       ROMX                     (0537)     romx                               ; Get the run length (CPU.A <- *pXIData)
0107: 53 25    MOV   [__r1],A           (0538)     mov   [__r1], A                    ; Initialize downcounter
0109: 50 00    MOV   A,0x0              (0539)     mov   A, 0                         ; Initialize source data
                                        (0540) 
                                        (0541) .ClearRAMBlockLoop:
                                        (0542)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0543)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0544)     ;
010B: 3F 26    MVI   [__r0],A           (0545)     mvi   [__r0], A                    ; Clear a byte
010D: 47 26 FF TST   [__r0],0xFF        (0546)     tst   [__r0], 0xff                 ; Check for page crossing
0110: B0 08    JNZ   0x0119             (0547)     jnz   .ClearLoopTail               ;   No crossing, keep going
0112: 5D D5    MOV   A,REG[0xD5]        (0548)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0114: 74       INC   A                  (0549)     inc   A
0115: 60 D5    MOV   REG[0xD5],A        (0550)     mov   reg[ MVW_PP], A
0117: 50 00    MOV   A,0x0              (0551)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0552) .ClearLoopTail:
0119: 7A 25    DEC   [__r1]             (0553)     dec   [__r1]                       ; Was this the last byte?
011B: BF EF    JNZ   0x010B             (0554)     jnz   .ClearRAMBlockLoop           ;   No,  continue
011D: 18       POP   A                  (0555)     pop   A                            ;   Yes, restore pXIData to [A,X] and
011E: 8F AA    JMP   0x00C9             (0556)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0557) 
                                        (0558) .C_RTE_WrapUp:
0120: 18       POP   A                  (0559)     pop   A                            ; balance stack
                                        (0560) 
                                        (0561) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0562) 
                                        (0563) C_RTE_Done:
                                        (0564) 
                                        (0565) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0566) 
                                        (0567)     ;-------------------------------
                                        (0568)     ; Voltage Stabilization for SMP
                                        (0569)     ;-------------------------------
                                        (0570) 
                                        (0571) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0572) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0573)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0574)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0575)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0576)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0577)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0578)     M8C_SetBank1
                                        (0579)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0580)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0581)     M8C_SetBank0
                                        (0582)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0583)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0584) .WaitFor2ms:
                                        (0585)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0586)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0587) ENDIF ; SMP is operational
                                        (0588) ENDIF ; 5.0V Operation
                                        (0589) 
                                        (0590)     ;-------------------------------
                                        (0591)     ; Set Power-On Reset (POR) Level
                                        (0592)     ;-------------------------------
                                        (0593) 
                                        (0594)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0595)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0596)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0597)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0598)     ;  lead to corruption of PSoC flash.
                                        (0599) 
0121: 71 10    OR    F,0x10             (0600)     M8C_SetBank1
                                        (0601) 
                                        (0602) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0603)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0604)  ELSE                                       ;    No, fast mode
                                        (0605)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0606)                                             ;       no, set midpoint POR in user code, if desired
                                        (0607)   ELSE ; 24HMz                              ;
                                        (0608)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0609)   ENDIF ; 24MHz
                                        (0610)  ENDIF ; Slow Mode
                                        (0611) ENDIF ; 5.0V Operation
                                        (0612) 
0123: 70 EF    AND   F,0xEF             (0613)     M8C_SetBank0
                                        (0614) 
                                        (0615)     ;----------------------------
                                        (0616)     ; Wrap up and invoke "main"
                                        (0617)     ;----------------------------
                                        (0618) 
                                        (0619)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0620)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0621)     ;
0125: 62 E0 00 MOV   REG[0xE0],0x0      (0622)     mov  reg[INT_MSK0],0
                                        (0623) 
                                        (0624)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0625)     ; And put decimator in full mode so it does not consume too much current.
                                        (0626)     ;
0128: 71 10    OR    F,0x10             (0627)     M8C_SetBank1
012A: 62 E0 00 MOV   REG[0xE0],0x0      (0628)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
012D: 43 E7 80 OR    REG[0xE7],0x80     (0629)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0130: 70 EF    AND   F,0xEF             (0630)     M8C_SetBank0
                                        (0631) 
                                        (0632)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0633)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0634)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0635)     ;
0132: 62 E2 00 MOV   REG[0xE2],0x0      (0636)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0637)                                    ; have been set during the boot process.
                                        (0638) IF	(TOOLCHAIN & HITECH)
                                        (0639) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0640) ELSE
                                        (0641) IF ENABLE_LJMP_TO_MAIN
                                        (0642)     ljmp  _main                    ; goto main (no return)
                                        (0643) ELSE
0135: 7C 07 88 LCALL _main|__text_start|_main(0644)     lcall _main                    ; call main
                                        (0645) .Exit:
0138: 8F FF    JMP   0x0138             (0646)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0647) ENDIF
                                        (0648) ENDIF ; TOOLCHAIN
                                        (0649) 
                                        (0650)     ;---------------------------------
                                        (0651)     ; Library Access to Global Parms
                                        (0652)     ;---------------------------------
                                        (0653)     ;
                                        (0654)  bGetPowerSetting:
                                        (0655) _bGetPowerSetting:
                                        (0656)     ; Returns value of POWER_SETTING in the A register.
                                        (0657)     ; No inputs. No Side Effects.
                                        (0658)     ;
013A: 50 10    MOV   A,0x10             (0659)     mov   A, POWER_SETTING
013C: 7F       RET                      (0660)     ret
(0661) 
(0662) IF	(TOOLCHAIN & HITECH)
(0663) ELSE
(0664)     ;---------------------------------
(0665)     ; Order Critical RAM & ROM AREAs
(0666)     ;---------------------------------
(0667)     ;  'TOP' is all that has been defined so far...
(0668) 
(0669)     ;  ROM AREAs for C CONST, static & global items
(0670)     ;
(0671)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
(0672)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
(0673) __idata_start:
(0674) 
(0675)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
(0676) __func_lit_start:
(0677) 
(0678) IF ( SYSTEM_LARGE_MEMORY_MODEL )
(0679)     ; We use the func_lit area to store a pointer to extended initialized
(0680)     ; data (xidata) area that follows the text area. Func_lit isn't
(0681)     ; relocated by the code compressor, but the text area may shrink and
(0682)     ; that moves xidata around.
(0683)     ;
(0684) __pXIData:         word __text_end           ; ptr to extended idata
(0685) ENDIF
(0686) 
(0687)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
(0688)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
(0689) 
(0690)     ; CODE segment for general use
(0691)     ;
(0692)     AREA text (ROM, REL, CON)
(0693) __text_start:
(0694) 
(0695)     ; RAM area usage
(0696)     ;
(0697)     AREA data              (RAM, REL, CON)   ; initialized RAM
(0698) __data_start:
(0699) 
(0700)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
(0701)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
(0702)     AREA bss               (RAM, REL, CON)   ; general use
(0703) __bss_start:
(0704) 
(0705) ENDIF ; TOOLCHAIN
(0706) 
(0707) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_servo_controller_Bank1
                                        (0006) export LoadConfigTBL_servo_controller_Bank0
                                        (0007) export LoadConfigTBL_servo_controller_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_servo_controller_Bank0:
                                        (0010) ;  Instance name Motor1, User Module PWM16
                                        (0011) ;       Instance name Motor1, Block Name PWM16_LSB(DBB00)
                                        (0012) 	db		23h, 00h		;Motor1_CONTROL_LSB_REG(DBB00CR0)
                                        (0013) 	db		21h, 1fh		;Motor1_PERIOD_LSB_REG(DBB00DR1)
                                        (0014) 	db		22h, e7h		;Motor1_COMPARE_LSB_REG(DBB00DR2)
                                        (0015) ;       Instance name Motor1, Block Name PWM16_MSB(DBB01)
                                        (0016) 	db		27h, 00h		;Motor1_CONTROL_MSB_REG(DBB01CR0)
                                        (0017) 	db		25h, 4eh		;Motor1_PERIOD_MSB_REG(DBB01DR1)
                                        (0018) 	db		26h, 03h		;Motor1_COMPARE_MSB_REG(DBB01DR2)
                                        (0019) ;  Instance name Motor2, User Module PWM16
                                        (0020) ;       Instance name Motor2, Block Name PWM16_LSB(DCB02)
                                        (0021) 	db		2bh, 00h		;Motor2_CONTROL_LSB_REG(DCB02CR0)
                                        (0022) 	db		29h, 1fh		;Motor2_PERIOD_LSB_REG(DCB02DR1)
                                        (0023) 	db		2ah, dbh		;Motor2_COMPARE_LSB_REG(DCB02DR2)
                                        (0024) ;       Instance name Motor2, Block Name PWM16_MSB(DCB03)
                                        (0025) 	db		2fh, 00h		;Motor2_CONTROL_MSB_REG(DCB03CR0)
                                        (0026) 	db		2dh, 4eh		;Motor2_PERIOD_MSB_REG(DCB03DR1)
                                        (0027) 	db		2eh, 05h		;Motor2_COMPARE_MSB_REG(DCB03DR2)
                                        (0028) ;  Instance name Motor3, User Module PWM16
                                        (0029) ;       Instance name Motor3, Block Name PWM16_LSB(DBB10)
                                        (0030) 	db		33h, 00h		;Motor3_CONTROL_LSB_REG(DBB10CR0)
                                        (0031) 	db		31h, 1fh		;Motor3_PERIOD_LSB_REG(DBB10DR1)
                                        (0032) 	db		32h, cfh		;Motor3_COMPARE_LSB_REG(DBB10DR2)
                                        (0033) ;       Instance name Motor3, Block Name PWM16_MSB(DBB11)
                                        (0034) 	db		37h, 00h		;Motor3_CONTROL_MSB_REG(DBB11CR0)
                                        (0035) 	db		35h, 4eh		;Motor3_PERIOD_MSB_REG(DBB11DR1)
                                        (0036) 	db		36h, 07h		;Motor3_COMPARE_MSB_REG(DBB11DR2)
                                        (0037) ;  Instance name UART, User Module UART
                                        (0038) ;       Instance name UART, Block Name RX(DCB13)
                                        (0039) 	db		3fh, 00h		;UART_RX_CONTROL_REG(DCB13CR0)
                                        (0040) 	db		3dh, 00h		;UART_(DCB13DR1)
                                        (0041) 	db		3eh, 00h		;UART_RX_BUFFER_REG (DCB13DR2)
                                        (0042) ;       Instance name UART, Block Name TX(DCB12)
                                        (0043) 	db		3bh, 00h		;UART_TX_CONTROL_REG(DCB12CR0)
                                        (0044) 	db		39h, 00h		;UART_TX_BUFFER_REG (DCB12DR1)
                                        (0045) 	db		3ah, 00h		;UART_(DCB12DR2)
                                        (0046) ;  Global Register values Bank 0
                                        (0047) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0048) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0049) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0050) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0051) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0052) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0053) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0054) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0055) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0056) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0057) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0058) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0059) 	db		b5h, 88h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0060) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0061) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0062) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0063) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0064) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0065) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0066) 	db		bdh, 24h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0067) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0068) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0069) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0070) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0071) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0072) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0073) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0074) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0075) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0076) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0077) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0078) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0079) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0080) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0081) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0082) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0083) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0084) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0085) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0086) 	db		ffh
                                        (0087) LoadConfigTBL_servo_controller_Bank1:
                                        (0088) ;  Instance name Motor1, User Module PWM16
                                        (0089) ;       Instance name Motor1, Block Name PWM16_LSB(DBB00)
                                        (0090) 	db		20h, 01h		;Motor1_FUNC_LSB_REG(DBB00FN)
                                        (0091) 	db		21h, 16h		;Motor1_INPUT_LSB_REG(DBB00IN)
                                        (0092) 	db		22h, 40h		;Motor1_OUTPUT_LSB_REG(DBB00OU)
                                        (0093) ;       Instance name Motor1, Block Name PWM16_MSB(DBB01)
                                        (0094) 	db		24h, 21h		;Motor1_FUNC_MSB_REG(DBB01FN)
                                        (0095) 	db		25h, 36h		;Motor1_INPUT_MSB_REG(DBB01IN)
                                        (0096) 	db		26h, 44h		;Motor1_OUTPUT_MSB_REG(DBB01OU)
                                        (0097) ;  Instance name Motor2, User Module PWM16
                                        (0098) ;       Instance name Motor2, Block Name PWM16_LSB(DCB02)
                                        (0099) 	db		28h, 01h		;Motor2_FUNC_LSB_REG(DCB02FN)
                                        (0100) 	db		29h, 16h		;Motor2_INPUT_LSB_REG(DCB02IN)
                                        (0101) 	db		2ah, 40h		;Motor2_OUTPUT_LSB_REG(DCB02OU)
                                        (0102) ;       Instance name Motor2, Block Name PWM16_MSB(DCB03)
                                        (0103) 	db		2ch, 21h		;Motor2_FUNC_MSB_REG(DCB03FN)
                                        (0104) 	db		2dh, 36h		;Motor2_INPUT_MSB_REG(DCB03IN)
                                        (0105) 	db		2eh, 45h		;Motor2_OUTPUT_MSB_REG(DCB03OU)
                                        (0106) ;  Instance name Motor3, User Module PWM16
                                        (0107) ;       Instance name Motor3, Block Name PWM16_LSB(DBB10)
                                        (0108) 	db		30h, 01h		;Motor3_FUNC_LSB_REG(DBB10FN)
                                        (0109) 	db		31h, 16h		;Motor3_INPUT_LSB_REG(DBB10IN)
                                        (0110) 	db		32h, 40h		;Motor3_OUTPUT_LSB_REG(DBB10OU)
                                        (0111) ;       Instance name Motor3, Block Name PWM16_MSB(DBB11)
                                        (0112) 	db		34h, 21h		;Motor3_FUNC_MSB_REG(DBB11FN)
                                        (0113) 	db		35h, 36h		;Motor3_INPUT_MSB_REG(DBB11IN)
                                        (0114) 	db		36h, 44h		;Motor3_OUTPUT_MSB_REG(DBB11OU)
                                        (0115) ;  Instance name UART, User Module UART
                                        (0116) ;       Instance name UART, Block Name RX(DCB13)
                                        (0117) 	db		3ch, 05h		;UART_RX_FUNC_REG   (DCB13FN)
                                        (0118) 	db		3dh, c1h		;UART_RX_INPUT_REG  (DCB13IN)
                                        (0119) 	db		3eh, 40h		;UART_RX_OUTPUT_REG (DCB13OU)
                                        (0120) ;       Instance name UART, Block Name TX(DCB12)
                                        (0121) 	db		38h, 0dh		;UART_TX_FUNC_REG   (DCB12FN)
                                        (0122) 	db		39h, 01h		;UART_TX_INPUT_REG  (DCB12IN)
                                        (0123) 	db		3ah, 45h		;UART_TX_OUTPUT_REG (DCB12OU)
                                        (0124) ;  Global Register values Bank 1
                                        (0125) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0126) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0127) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0128) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0129) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0130) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0131) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0132) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0133) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0134) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0135) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0136) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0137) 	db		e1h, b1h		; OscillatorControl_1 register (OSC_CR1)
                                        (0138) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0139) 	db		dfh, 19h		; OscillatorControl_3 register (OSC_CR3)
                                        (0140) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0141) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0142) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0143) 	db		ffh
                                        (0144) LoadConfigTBL_servo_controller_Ordered:
                                        (0145) ;  Ordered Global Register values

(0146) 	M8C_SetBank1
02C3: 10       PUSH  X                  
02C4: 62 00 22 MOV   REG[0x0],0x22      (0147) 	mov	reg[00h], 22h		; Port_0_DriveMode_0 register (PRT0DM0)
02C7: 62 01 DD MOV   REG[0x1],0xDD      (0148) 	mov	reg[01h], ddh		; Port_0_DriveMode_1 register (PRT0DM1)
02CA: 70 EF    AND   F,0xEF             (0149) 	M8C_SetBank0
02CC: 62 03 CD MOV   REG[0x3],0xCD      (0150) 	mov	reg[03h], cdh		; Port_0_DriveMode_2 register (PRT0DM2)
02CF: 62 02 32 MOV   REG[0x2],0x32      (0151) 	mov	reg[02h], 32h		; Port_0_GlobalSelect register (PRT0GS)
02D2: 71 10    OR    F,0x10             (0152) 	M8C_SetBank1
02D4: 62 02 00 MOV   REG[0x2],0x0       (0153) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
02D7: 62 03 00 MOV   REG[0x3],0x0       (0154) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
02DA: 70 EF    AND   F,0xEF             (0155) 	M8C_SetBank0
02DC: 62 01 00 MOV   REG[0x1],0x0       (0156) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
02DF: 71 10    OR    F,0x10             (0157) 	M8C_SetBank1
02E1: 62 04 31 MOV   REG[0x4],0x31      (0158) 	mov	reg[04h], 31h		; Port_1_DriveMode_0 register (PRT1DM0)
02E4: 62 05 CE MOV   REG[0x5],0xCE      (0159) 	mov	reg[05h], ceh		; Port_1_DriveMode_1 register (PRT1DM1)
02E7: 70 EF    AND   F,0xEF             (0160) 	M8C_SetBank0
02E9: 62 07 CE MOV   REG[0x7],0xCE      (0161) 	mov	reg[07h], ceh		; Port_1_DriveMode_2 register (PRT1DM2)
02EC: 62 06 31 MOV   REG[0x6],0x31      (0162) 	mov	reg[06h], 31h		; Port_1_GlobalSelect register (PRT1GS)
02EF: 71 10    OR    F,0x10             (0163) 	M8C_SetBank1
02F1: 62 06 00 MOV   REG[0x6],0x0       (0164) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
02F4: 62 07 00 MOV   REG[0x7],0x0       (0165) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
02F7: 70 EF    AND   F,0xEF             (0166) 	M8C_SetBank0
02F9: 62 05 00 MOV   REG[0x5],0x0       (0167) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
02FC: 71 10    OR    F,0x10             (0168) 	M8C_SetBank1
02FE: 62 08 00 MOV   REG[0x8],0x0       (0169) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
0301: 62 09 FF MOV   REG[0x9],0xFF      (0170) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
0304: 70 EF    AND   F,0xEF             (0171) 	M8C_SetBank0
0306: 62 0B FF MOV   REG[0xB],0xFF      (0172) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
0309: 62 0A 00 MOV   REG[0xA],0x0       (0173) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
030C: 71 10    OR    F,0x10             (0174) 	M8C_SetBank1
030E: 62 0A 00 MOV   REG[0xA],0x0       (0175) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0311: 62 0B 00 MOV   REG[0xB],0x0       (0176) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0314: 70 EF    AND   F,0xEF             (0177) 	M8C_SetBank0
0316: 62 09 00 MOV   REG[0x9],0x0       (0178) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0319: 71 10    OR    F,0x10             (0179) 	M8C_SetBank1
031B: 62 0C 00 MOV   REG[0xC],0x0       (0180) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
031E: 62 0D 00 MOV   REG[0xD],0x0       (0181) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0321: 70 EF    AND   F,0xEF             (0182) 	M8C_SetBank0
0323: 62 0F 00 MOV   REG[0xF],0x0       (0183) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0326: 62 0E 00 MOV   REG[0xE],0x0       (0184) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0329: 71 10    OR    F,0x10             (0185) 	M8C_SetBank1
032B: 62 0E 00 MOV   REG[0xE],0x0       (0186) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
032E: 62 0F 00 MOV   REG[0xF],0x0       (0187) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0331: 70 EF    AND   F,0xEF             (0188) 	M8C_SetBank0
0333: 62 0D 00 MOV   REG[0xD],0x0       (0189) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0336: 71 10    OR    F,0x10             (0190) 	M8C_SetBank1
0338: 62 10 00 MOV   REG[0x10],0x0      (0191) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
033B: 62 11 00 MOV   REG[0x11],0x0      (0192) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
033E: 70 EF    AND   F,0xEF             (0193) 	M8C_SetBank0
0340: 62 13 00 MOV   REG[0x13],0x0      (0194) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0343: 62 12 00 MOV   REG[0x12],0x0      (0195) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0346: 71 10    OR    F,0x10             (0196) 	M8C_SetBank1
0348: 62 12 00 MOV   REG[0x12],0x0      (0197) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
034B: 62 13 00 MOV   REG[0x13],0x0      (0198) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
034E: 70 EF    AND   F,0xEF             (0199) 	M8C_SetBank0
0350: 62 11 00 MOV   REG[0x11],0x0      (0200) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0353: 71 10    OR    F,0x10             (0201) 	M8C_SetBank1
0355: 62 14 00 MOV   REG[0x14],0x0      (0202) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0358: 62 15 00 MOV   REG[0x15],0x0      (0203) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
035B: 70 EF    AND   F,0xEF             (0204) 	M8C_SetBank0
035D: 62 17 00 MOV   REG[0x17],0x0      (0205) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0360: 62 16 00 MOV   REG[0x16],0x0      (0206) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0363: 71 10    OR    F,0x10             (0207) 	M8C_SetBank1
0365: 62 16 00 MOV   REG[0x16],0x0      (0208) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0368: 62 17 00 MOV   REG[0x17],0x0      (0209) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
036B: 70 EF    AND   F,0xEF             (0210) 	M8C_SetBank0
036D: 62 15 00 MOV   REG[0x15],0x0      (0211) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0370: 71 10    OR    F,0x10             (0212) 	M8C_SetBank1
0372: 62 18 00 MOV   REG[0x18],0x0      (0213) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0375: 62 19 00 MOV   REG[0x19],0x0      (0214) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0378: 70 EF    AND   F,0xEF             (0215) 	M8C_SetBank0
037A: 62 1B 00 MOV   REG[0x1B],0x0      (0216) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
037D: 62 1A 00 MOV   REG[0x1A],0x0      (0217) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0380: 71 10    OR    F,0x10             (0218) 	M8C_SetBank1
0382: 62 1A 00 MOV   REG[0x1A],0x0      (0219) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0385: 62 1B 00 MOV   REG[0x1B],0x0      (0220) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0388: 70 EF    AND   F,0xEF             (0221) 	M8C_SetBank0
038A: 62 19 00 MOV   REG[0x19],0x0      (0222) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
038D: 71 10    OR    F,0x10             (0223) 	M8C_SetBank1
038F: 62 1C 00 MOV   REG[0x1C],0x0      (0224) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0392: 62 1D 00 MOV   REG[0x1D],0x0      (0225) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0395: 70 EF    AND   F,0xEF             (0226) 	M8C_SetBank0
0397: 62 1F 00 MOV   REG[0x1F],0x0      (0227) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
039A: 62 1E 00 MOV   REG[0x1E],0x0      (0228) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
039D: 71 10    OR    F,0x10             (0229) 	M8C_SetBank1
039F: 62 1E 00 MOV   REG[0x1E],0x0      (0230) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
03A2: 62 1F 00 MOV   REG[0x1F],0x0      (0231) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
03A5: 70 EF    AND   F,0xEF             (0232) 	M8C_SetBank0
03A7: 62 1D 00 MOV   REG[0x1D],0x0      (0233) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
03AA: 70 EF    AND   F,0xEF             (0234) 	M8C_SetBank0
03AC: 7F       RET                      (0235) 	ret
(0236) 
(0237) 
(0238) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_servo_controller
                                        (0026) export _LoadConfig_servo_controller
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     

03AF: 7C 03 B6 LCALL 0x03B6             (0058) 	lcall	LoadConfig_servo_controller
03B2: 7C 02 C2 LCALL 0x02C2             (0059) 	lcall	LoadConfigTBL_servo_controller_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
03B5: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration servo_controller
                                        (0067) ;
                                        (0068) ;    Load configuration registers for servo_controller.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_servo_controller:
                                        (0085)  LoadConfig_servo_controller:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
03B6: 10       PUSH  X                  (0088) 	push	x
03B7: 70 EF    AND   F,0xEF             (0089)     M8C_SetBank0                    ; Force bank 0
03B9: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
03BB: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
03BC: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_servo_controller_Bank0
03BE: 57 EE    MOV   X,0xEE             (0094)     mov     X, <LoadConfigTBL_servo_controller_Bank0
03C0: 7C 03 D1 LCALL 0x03D1             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
03C3: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
03C5: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
03C6: 50 02    MOV   A,0x2              (0100)     mov     A, >LoadConfigTBL_servo_controller_Bank1
03C8: 57 6D    MOV   X,0x6D             (0101)     mov     X, <LoadConfigTBL_servo_controller_Bank1
03CA: 7C 03 D1 LCALL 0x03D1             (0102)     lcall   LoadConfig              ; Load the bank 1 values
                                        (0103) 
03CD: 70 EF    AND   F,0xEF             (0104)     M8C_SetBank0                    ; Force return to bank 0
03CF: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
03D0: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
03D1: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
03D3: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
03D4: 08       PUSH  A                  (0132)     push    A
03D5: 4F       MOV   X,SP               (0133)     mov     X, SP
03D6: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
03D9: D0 04    JNC   0x03DE             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
03DB: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
03DE: 18       POP   A                  (0138)     pop     A
03DF: 20       POP   X                  (0139)     pop     X
                                        (0140) 
                                        (0141) LoadConfigLp:
03E0: 70 EF    AND   F,0xEF             (0142)     M8C_SetBank0                    ; Switch to bank 0
03E2: 62 E3 00 MOV   REG[0xE3],0x0      (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
03E5: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
03E6: 08       PUSH  A                  (0145)     push    A
03E7: 28       ROMX                     (0146)     romx                            ; Load register address from table
03E8: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
03EA: A0 1F    JZ    0x040A             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
03EC: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
03ED: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
03F0: A0 03    JZ    0x03F4             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03F2: 71 10    OR    F,0x10             (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
03F4: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
03F6: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
03F7: 20       POP   X                  (0156)     pop     X
03F8: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
03F9: 09 00    ADC   A,0x0              (0158)     adc     A, 0
03FB: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
03FC: 08       PUSH  A                  (0160)     push    A
03FD: 28       ROMX                     (0161)     romx                            ; load config data from the table
03FE: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
03FF: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
0401: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
0403: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
0404: 20       POP   X                  (0166)     pop     X
0405: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
0406: 09 00    ADC   A,0x0              (0168)     adc     A, 0
0408: 8F D7    JMP   0x03E0             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
040A: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
040C: 70 3F    AND   F,0x3F             
040E: 71 C0    OR    F,0xC0             (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
0410: 7F       RET                      (0173)     ret
(0174) 
(0175) AREA InterruptRAM(ram, rel)
(0176) 
(0177) NO_SHADOW:
(0178) _NO_SHADOW:
FILE: lib\uartint.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.2, Updated on 2009/10/23 at 10:13:12
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    ;@PSoC_UserCode_END@ (Do not change this line.)
0411: 7E       RETI                     (0101)    reti
                                        (0102) 
                                        (0103) 
                                        (0104) ;-----------------------------------------------------------------------------
                                        (0105) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0106) ;
                                        (0107) ;  DESCRIPTION:
                                        (0108) ;     UART RX interrupt handler for instance UART.
                                        (0109) ;     This ISR handles the background processing of received characters if
                                        (0110) ;     the buffer is enabled.
                                        (0111) ;
                                        (0112) ;
                                        (0113) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0114) ;
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;     There are 3 posible errors that may occur with the serial port.
                                        (0117) ;      1) Parity Error
                                        (0118) ;      2) Framing Error
                                        (0119) ;      3) OverRun Error
                                        (0120) ;
                                        (0121) ;  This user module check for parity and framing error.  If either of these
                                        (0122) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0123) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0124) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0125) ;  this ISR to set a flag if an error condition occurs.
                                        (0126) ;
                                        (0127) ;  THEORY of OPERATION:
                                        (0128) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0129) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0130) ;     the command terminator is detected, the command bit is set and all other
                                        (0131) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0132) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0133) ;     terminator.  After that, the characters will be discarded, although
                                        (0134) ;     a command determinator will still cause the command bit to be set.
                                        (0135) ;
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) _UART_RX_ISR:
                                        (0138) 
                                        (0139)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0140)    ;---------------------------------------------------
                                        (0141)    ; Insert your custom code below this banner
                                        (0142)    ;---------------------------------------------------
                                        (0143)    ;   NOTE: interrupt service routines must preserve
                                        (0144)    ;   the values of the A and X CPU registers.
                                        (0145) 
                                        (0146)    ;---------------------------------------------------
                                        (0147)    ; Insert your custom code above this banner
                                        (0148)    ;---------------------------------------------------
                                        (0149)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0150) 
                                        (0151) IF (UART_RXBUF_ENABLE)
0412: 08       PUSH  A                  (0152)    push A
0413: 10       PUSH  X                  (0153)    push X
                                        (0154)    
                                        (0155)    IF SYSTEM_LARGE_MEMORY_MODEL
0414: 5D D3    MOV   A,REG[0xD3]        
0416: 08       PUSH  A                  (0156)       REG_PRESERVE IDX_PP
                                        (0157)    ENDIF
                                        (0158)    
0417: 58 01    MOV   X,[0x1]            (0159)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
0419: 5D 3F    MOV   A,REG[0x3F]        (0160)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
041B: 08       PUSH  A                  (0161)    push A                                                  ; Store copy for later test
                                        (0162)                                                            ; IF real RX interrupt
041C: 21 08    AND   A,0x8              (0163)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
041E: B0 04    JNZ   0x0423             (0164)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
0420: 18       POP   A                  (0165)    pop  A                                                  ; Restore stack
0421: 80 5E    JMP   0x0480             (0166)    jmp  .RESTORE_IDX_PP
                                        (0167) 
                                        (0168) .UARTRX_ReadRx:
0423: 18       POP   A                  (0169)    pop  A                                                  ; Restore status flags
                                        (0170)                                                            ; IF there is no error, get data
                                        (0171)                                                            ; Check for parity or framing error
0424: 21 E0    AND   A,0xE0             (0172)    and  A,UART_RX_ERROR
0426: A0 12    JZ    0x0439             (0173)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0174) 
0428: 2C 00    OR    [0x0],A            (0175)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
042A: 49 3E 00 TST   REG[0x3E],0x0      (0176)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
042D: 21 20    AND   A,0x20             (0177)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
042F: A0 50    JZ    0x0480             (0178)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0179) 
                                        (0180)                                                            ; Disable and re-enable RX to reset after
                                        (0181)                                                            ; framing error.
0431: 41 3F FE AND   REG[0x3F],0xFE     (0182)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
0434: 43 3F 01 OR    REG[0x3F],0x1      (0183)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
0437: 80 48    JMP   0x0480             (0184)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0185) 
                                        (0186) 
                                        (0187) .UARTRX_NO_ERROR:
0439: 5D 3E    MOV   A,REG[0x3E]        (0188)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0189) 
                                        (0190)                                                            ; IF buffer not full
043B: 47 00 01 TST   [0x0],0x1          (0191)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
043E: B0 41    JNZ   0x0480             (0192)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0193) 
0440: 39 0D    CMP   A,0xD              (0194)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
0442: B0 14    JNZ   0x0457             (0195)    jnz  .UARTRX_CHK_BACKSPACE
0444: 2E 00 01 OR    [0x0],0x1          (0196)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0197) 
                                        (0198) 
                                        (0199) 
0447: 62 D3 00 MOV   REG[0xD3],0x0      (0200)    RAM_SETPAGE_IDX >UART_aRxBuffer
044A: 70 3F    AND   F,0x3F             
044C: 71 80    OR    F,0x80             (0201)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
044E: 56 02 00 MOV   [X+2],0x0          (0202)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
0451: 70 3F    AND   F,0x3F             
0453: 71 00    OR    F,0x0              (0203)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0455: 80 2A    JMP   0x0480             (0204)    jmp  .RESTORE_IDX_PP
                                        (0205) 
                                        (0206) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0207) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0208)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0209)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0210)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0211)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0212)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0213)    jmp  .RESTORE_IDX_PP
                                        (0214) ENDIF                                                      ; 
                                        (0215) 
                                        (0216) .UARTRX_IGNORE:
                                        (0217) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
0457: 39 20    CMP   A,0x20             (0218)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
0459: C0 26    JC    0x0480             (0219)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0220) ENDIF
                                        (0221) 
                                        (0222) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0223) 	
045B: 62 D3 00 MOV   REG[0xD3],0x0      (0224)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
045E: 3C 01 1F CMP   [0x1],0x1F         (0225)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
0461: C0 11    JC    0x0473             (0226)    jc   .UARTRX_ISR_GETDATA
0463: 70 3F    AND   F,0x3F             
0465: 71 80    OR    F,0x80             (0227)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0467: 56 02 00 MOV   [X+2],0x0          (0228)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
046A: 70 3F    AND   F,0x3F             
046C: 71 00    OR    F,0x0              (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
046E: 2E 00 10 OR    [0x0],0x10         (0230)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
0471: 80 0E    JMP   0x0480             (0231)    jmp  .RESTORE_IDX_PP
                                        (0232) 
                                        (0233) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0234)                                                            ; X is already loaded with pointer
0473: 70 3F    AND   F,0x3F             
0475: 71 80    OR    F,0x80             (0235)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0477: 54 02    MOV   [X+2],A            (0236)    mov  [X+UART_aRxBuffer],A                               ; store data in array
0479: 70 3F    AND   F,0x3F             
047B: 71 00    OR    F,0x0              (0237)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
047D: 75       INC   X                  (0238)    inc  X                                                  ; Inc the pointer
047E: 5A 01    MOV   [0x1],X            (0239)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0240)                                                            ; ENDIF max string size
                                        (0241) .RESTORE_IDX_PP:
                                        (0242)    IF SYSTEM_LARGE_MEMORY_MODEL
0480: 18       POP   A                  
0481: 60 D3    MOV   REG[0xD3],A        (0243)       REG_RESTORE IDX_PP
                                        (0244)    ENDIF
                                        (0245) 
                                        (0246) .END_UARTRX_ISR:
0483: 20       POP   X                  (0247)    pop  X
0484: 18       POP   A                  (0248)    pop  A
                                        (0249) 
                                        (0250) ENDIF
                                        (0251) 
                                        (0252) UART_RX_ISR_END:
0485: 7E       RETI                     (0253)    reti
(0254) 
(0255) ; end of file UARTINT.asm
(0256) 
FILE: lib\uart.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.2, Updated on 2009/10/23 at 10:13:12
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
0486: 43 E1 40 OR    REG[0xE1],0x40     (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
0489: 43 E1 80 OR    REG[0xE1],0x80     (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
048C: 7F       RET                      (0182)    ret
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
048D: 41 E1 BF AND   REG[0xE1],0xBF     (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
0490: 41 E1 7F AND   REG[0xE1],0x7F     (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0493: 7F       RET                      (0214)    ret
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
0494: 71 10    OR    F,0x10             (0247)    M8C_SetBank1
0496: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
0498: A0 07    JZ    0x04A0             (0249)    jz    .SetModeRegEmpty
049A: 43 38 10 OR    REG[0x38],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
049D: 70 EF    AND   F,0xEF             (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
049F: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
04A0: 41 38 EF AND   REG[0x38],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
04A3: 70 EF    AND   F,0xEF             (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
04A5: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
04A6: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
04A8: 60 3B    MOV   REG[0x3B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
04AA: 60 3F    MOV   REG[0x3F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
04AC: 91 2A    CALL  0x05D8             (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
04AE: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
04AF: 41 3B FE AND   REG[0x3B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
04B2: 41 3F FE AND   REG[0x3F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
04B5: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
04B6: 60 39    MOV   REG[0x39],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
04B8: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
04B9: 5D 3B    MOV   A,REG[0x3B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
04BB: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
04BC: 5D 3E    MOV   A,REG[0x3E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
04BE: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
04BF: 5D 3F    MOV   A,REG[0x3F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
04C1: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
04C2: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
04C4: 71 10    OR    F,0x10             (0490)    M8C_SetBank1
04C6: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
04C8: A0 06    JZ    0x04CF             (0492)    jz   .SetTxCmpMode
                                        (0493) 
04CA: 41 38 EF AND   REG[0x38],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
04CD: 80 04    JMP   0x04D2             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
04CF: 43 38 10 OR    REG[0x38],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
                                        (0499) 
                                        (0500) .TxIntMode_End:
04D2: 70 EF    AND   F,0xEF             (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
04D4: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
04D5: 08       PUSH  A                  (0536)    push A
04D6: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
04D8: A0 06    JZ    0x04DF             (0538)    jz   .DisRxInt
                                        (0539)      ; Enable Rx Interrupt
04DA: 43 E1 80 OR    REG[0xE1],0x80     (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
04DD: 80 04    JMP   0x04E2             (0541)    jmp  .CheckTxInt
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
04DF: 41 E1 7F AND   REG[0xE1],0x7F     (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
04E2: 18       POP   A                  (0547)    pop  A
04E3: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
04E5: A0 06    JZ    0x04EC             (0549)    jz   .DisTxInt
                                        (0550)      ; Enable Tx Interrupt
04E7: 43 E1 40 OR    REG[0xE1],0x40     (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
04EA: 80 04    JMP   0x04EF             (0552)    jmp  .End_IntCntl
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
04EC: 41 E1 BF AND   REG[0xE1],0xBF     (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
04EF: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
04F0: 30       HALT                     
04F1: 31 32    XOR   A,0x32             
04F3: 33 34    XOR   A,[X+52]           
04F5: 35 36    XOR   [X+54],A           
04F7: 37 38 39 XOR   [X+56],0x39        
04FA: 41 42 43 AND   REG[0x42],0x43     
04FD: 44 45 46 OR    REG[X+0x45],0x46   
0500: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0501: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0502: 67       ASR   A                  (0603)    asr   A
0503: 67       ASR   A                  (0604)    asr   A
0504: 67       ASR   A                  (0605)    asr   A
0505: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0507: FF E7    INDEX 0x04F0             (0607)    index UART_HEX_STR                  ; Get Hex value
0509: 90 0F    CALL  0x051A             (0608)    call  UART_PutChar                  ; Write data to screen
050B: 18       POP   A                  (0609)    pop   A                             ; Restore value
050C: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
050E: FF E0    INDEX 0x04F0             (0611)    index UART_HEX_STR                  ; Get Hex value
0510: 90 08    CALL  0x051A             (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0512: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
0513: 4B       SWAP  A,X                (0645)    swap  A,X
0514: 9F EA    CALL  0x0500             (0646)    call  UART_PutSHexByte              ; Print MSB
0516: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
0517: 9F E7    CALL  0x0500             (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0519: 7F       RET                      (0650)    ret
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
051A: 49 3B 10 TST   REG[0x3B],0x10     
051D: AF FC    JZ    0x051A             
051F: 60 39    MOV   REG[0x39],A        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0521: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0522: 49 3F 08 TST   REG[0x3F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
0525: AF FC    JZ    0x0522             (0721)    jz  UART_cGetChar                             ; If not loop
0527: 5D 3E    MOV   A,REG[0x3E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0529: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
052A: 5D 3F    MOV   A,REG[0x3F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
052C: 08       PUSH  A                  (0756)    push A
052D: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
052F: B0 04    JNZ   0x0534             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0531: 18       POP   A                  (0759)    pop  A
0532: 80 0B    JMP   0x053E             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0534: 5D 3E    MOV   A,REG[0x3E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
0536: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0537: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0538: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
053A: B0 03    JNZ   0x053E             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
053C: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
053D: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
053E: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0540: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0541: 5D 3F    MOV   A,REG[0x3F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0543: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0545: 08       PUSH  A                  (0819)    push A
0546: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0548: B0 07    JNZ   0x0550             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
054A: 18       POP   A                  (0822)    pop  A
054B: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
054D: 4B       SWAP  A,X                (0824)    swap A,X
054E: 80 07    JMP   0x0556             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0550: 18       POP   A                  (0828)    pop  A
0551: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0553: 4B       SWAP  A,X                (0830)    swap A,X
0554: 5D 3E    MOV   A,REG[0x3E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0556: 7F       RET                      (0836)    ret
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
0557: 70 BF    AND   F,0xBF             (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
0559: 60 D3    MOV   REG[0xD3],A        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
055B: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
055D: A0 06    JZ    0x0564             (0872)    jz    End_PutString                           ; Check for end of string
055F: 9F B9    CALL  0x051A             (0873)    call  UART_PutChar                            ; Send character to Tx port
0561: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0562: 8F F8    JMP   0x055B             (0875)    jmp   .PutStringLoop                          ; Get next character
                                        (0876) 
                                        (0877) End_PutString:
0564: 70 3F    AND   F,0x3F             
0566: 71 C0    OR    F,0xC0             (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0568: 7F       RET                      (0879)    ret
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
0569: 70 BF    AND   F,0xBF             (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
056B: 62 D3 07 MOV   REG[0xD3],0x7      (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
056E: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
056F: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0571: A0 1A    JZ    0x058C             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0573: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
0575: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0577: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
0579: 60 D3    MOV   REG[0xD3],A        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
057B: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
057D: 49 3B 10 TST   REG[0x3B],0x10     
0580: AF FC    JZ    0x057D             
0582: 60 39    MOV   REG[0x39],A        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0584: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
0585: 62 D3 07 MOV   REG[0xD3],0x7      (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0588: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
058A: 8F E4    JMP   0x056F             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                        (0936) 
                                        (0937) .End_Write:
058C: 70 3F    AND   F,0x3F             
058E: 71 C0    OR    F,0xC0             (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0590: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0591: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0592: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
0595: B0 06    JNZ   0x059C             (0980)    jnz   .CW_WRITEIT
0597: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
059A: A0 1D    JZ    0x05B8             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
059C: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
059D: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
059F: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
05A1: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
05A2: 49 3B 10 TST   REG[0x3B],0x10     
05A5: AF FC    JZ    0x05A2             
05A7: 60 39    MOV   REG[0x39],A        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
05A9: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
05AA: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
05AD: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
05B0: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
05B3: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
05B6: 8F DB    JMP   0x0592             (0995)    jmp   .CW_Loop
                                        (0996) 
                                        (0997) .End_CWrite:
05B8: 70 3F    AND   F,0x3F             
05BA: 71 C0    OR    F,0xC0             (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
05BC: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
05BD: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
05BE: 10       PUSH  X                  (1030)    push  X
05BF: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
05C0: A0 0B    JZ    0x05CC             (1032)    jz    .End_CPutString
05C2: 9F 56    CALL  0x051A             (1033)    call  UART_PutChar                            ; Print character
05C4: 20       POP   X                  (1034)    pop   X
05C5: 18       POP   A                  (1035)    pop   A
05C6: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
05C7: DF F5    JNC   0x05BD             (1037)    jnc   UART_CPutString                         ; Check for carry
05C9: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
05CA: 8F F2    JMP   0x05BD             (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
05CC: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
05CE: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
05CF: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
05D1: 9F 47    CALL  0x051A             (1074)    call UART_PutChar
05D3: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
05D5: 9F 43    CALL  0x051A             (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
05D7: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
05D8: 62 D0 00 MOV   REG[0xD0],0x0      (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
05DB: 55 02 00 MOV   [0x2],0x0          (1122)    mov [UART_aRxBuffer], 0x00
05DE: 62 D0 00 MOV   REG[0xD0],0x0      (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
05E1: 55 01 00 MOV   [0x1],0x0          (1124)    mov [UART_bRxCnt], 0x00
05E4: 26 00 00 AND   [0x0],0x0          (1125)    and [UART_fStatus], 0x00
05E7: 62 D0 00 MOV   REG[0xD0],0x0      (1126)    RAM_SETPAGE_CUR >ptrParam
05EA: 55 31 00 MOV   [j+2],0x0          (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
05ED: 7F       RET                      (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
05EE: 62 D0 00 MOV   REG[0xD0],0x0      (1164)    RAM_SETPAGE_CUR >UART_fStatus
05F1: 51 00    MOV   A,[0x0]            (1165)    mov A,  [UART_fStatus]
05F3: 21 01    AND   A,0x1              (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
05F5: 7F       RET                      (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
05F6: 62 D0 00 MOV   REG[0xD0],0x0      (1208)    RAM_SETPAGE_CUR >UART_fStatus
05F9: 51 00    MOV   A,[0x0]            (1209)    mov A,  [UART_fStatus]
05FB: 21 F0    AND   A,0xF0             (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
05FD: 26 00 0F AND   [0x0],0xF          (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
0600: 7F       RET                      (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
0601: 62 D0 00 MOV   REG[0xD0],0x0      (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
0604: 51 01    MOV   A,[0x1]            (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
0606: 7F       RET                      (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
0607: 70 BF    AND   F,0xBF             (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
0609: 62 D0 00 MOV   REG[0xD0],0x0      (1303)    RAM_SETPAGE_CUR >ptrParam
060C: 50 02    MOV   A,0x2              (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
060E: 02 31    ADD   A,[j+2]            (1305)    add   A, [ptrParam]                      ; Add string offset
0610: 5C       MOV   X,A                (1306)    mov   X, A
0611: 62 D3 00 MOV   REG[0xD3],0x0      (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
0614: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
0616: B0 04    JNZ   0x061B             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
0618: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
0619: 80 33    JMP   0x064D             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
061B: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
061D: B0 11    JNZ   0x062F             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
061F: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
0620: 76 31    INC   [j+2]              (1318)    inc   [ptrParam]                         ;          the stored pointer.
0622: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
0624: 3C 31 1F CMP   [j+2],0x1F         (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
0627: BF F3    JNZ   0x061B             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
0629: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
062A: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
062D: 80 1F    JMP   0x064D             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
062F: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
0630: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
0631: 76 31    INC   [j+2]              (1334)    inc   [ptrParam]
0633: 3C 31 1F CMP   [j+2],0x1F         (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
0636: AF F3    JZ    0x062A             (1336)    jz    .TerminateString
0638: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
063A: A0 12    JZ    0x064D             (1338)    jz    .End_GetNextParam
063C: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
063E: BF F1    JNZ   0x0630             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
0640: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
0643: 76 31    INC   [j+2]              (1342)    inc   [ptrParam]
0645: 3C 31 1F CMP   [j+2],0x1F         (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
0648: B0 04    JNZ   0x064D             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
064A: 55 31 1F MOV   [j+2],0x1F         (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
064D: 20       POP   X                  (1348)    pop   X
064E: 10       PUSH  X                  (1349)    push  X
064F: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
0652: B0 0B    JNZ   0x065E             (1351)    jnz   .NotNullString
0654: 20       POP   X                  (1352)    pop   X
0655: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
0657: 50 00    MOV   A,0x0              (1354)    mov   A, >UART_aRxBuffer
0659: 70 3F    AND   F,0x3F             
065B: 71 C0    OR    F,0xC0             (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
065D: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
065E: 20       POP   X                  (1360)    pop  X
065F: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
0661: 70 3F    AND   F,0x3F             
0663: 71 C0    OR    F,0xC0             (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
0665: 7F       RET                      (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
0666: 62 D0 00 MOV   REG[0xD0],0x0      (1395)    RAM_SETPAGE_CUR >ptrParam
0669: 50 02    MOV   A,0x2              (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
066B: 02 31    ADD   A,[j+2]            (1397)    add  A, [ptrParam]                       ; Add string offset
066D: 5C       MOV   X,A                (1398)    mov  X,A
066E: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
0670: 7F       RET                      (1401)    ret
(1402) .ENDSECTION
(1403) 
(1404) ENDIF
(1405) 
(1406) 
(1407) ; End of File UART.asm
FILE: lib\motor3int.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Motor3INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "Motor3.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Motor3_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Motor3_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Motor3_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070) 
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
0671: 7E       RETI                     (0076)    reti
(0077) 
(0078) 
(0079) ; end of file Motor3INT.asm
FILE: lib\motor3.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Motor3.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "Motor3.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Motor3_EnableInt
                                        (0030) export _Motor3_EnableInt
                                        (0031) export  Motor3_DisableInt
                                        (0032) export _Motor3_DisableInt
                                        (0033) export  Motor3_Start
                                        (0034) export _Motor3_Start
                                        (0035) export  Motor3_Stop
                                        (0036) export _Motor3_Stop
                                        (0037) export  Motor3_WritePeriod
                                        (0038) export _Motor3_WritePeriod
                                        (0039) export  Motor3_WritePulseWidth
                                        (0040) export _Motor3_WritePulseWidth
                                        (0041) export  Motor3_wReadPulseWidth
                                        (0042) export _Motor3_wReadPulseWidth
                                        (0043) export  Motor3_wReadCounter
                                        (0044) export _Motor3_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wMotor3_ReadPulseWidth    ; deprecated
                                        (0049) export _wMotor3_ReadPulseWidth    ; deprecated
                                        (0050) export  wMotor3_ReadCounter       ; deprecated
                                        (0051) export _wMotor3_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA servo_controller_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: Motor3_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  Motor3_EnableInt:
                                        (0091) _Motor3_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
0672: 43 E1 20 OR    REG[0xE1],0x20     (0093)    Motor3_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0675: 7F       RET                      (0095)    ret
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: Motor3_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  Motor3_DisableInt:
                                        (0119) _Motor3_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
0676: 41 E1 DF AND   REG[0xE1],0xDF     (0121)    Motor3_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0679: 7F       RET                      (0123)    ret
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: Motor3_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  Motor3_Start:
                                        (0148) _Motor3_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
067A: 43 33 01 OR    REG[0x33],0x1      (0150)    Motor3_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
067D: 7F       RET                      (0152)    ret
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: Motor3_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  Motor3_Stop:
                                        (0176) _Motor3_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
067E: 41 33 FE AND   REG[0x33],0xFE     (0178)    Motor3_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0681: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: Motor3_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  Motor3_WritePeriod:
                                        (0206) _Motor3_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0682: 60 31    MOV   REG[0x31],A        (0208)    mov   reg[Motor3_PERIOD_LSB_REG], A
0684: 5B       MOV   A,X                (0209)    mov   A, X
0685: 60 35    MOV   REG[0x35],A        (0210)    mov   reg[Motor3_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
0687: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: Motor3_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  Motor3_WritePulseWidth:
                                        (0235) _Motor3_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0688: 60 32    MOV   REG[0x32],A        (0237)    mov   reg[Motor3_COMPARE_LSB_REG], A
068A: 5B       MOV   A,X                (0238)    mov   A, X
068B: 60 36    MOV   REG[0x36],A        (0239)    mov   reg[Motor3_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
068D: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: Motor3_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  Motor3_wReadPulseWidth:
                                        (0264) _Motor3_wReadPulseWidth:
                                        (0265)  wMotor3_ReadPulseWidth:                         ; this name deprecated
                                        (0266) _wMotor3_ReadPulseWidth:                         ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
068E: 5D 36    MOV   A,REG[0x36]        (0268)    mov   A, reg[Motor3_COMPARE_MSB_REG]
0690: 5C       MOV   X,A                (0269)    mov   X, A
0691: 5D 32    MOV   A,REG[0x32]        (0270)    mov   A, reg[Motor3_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0693: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: Motor3_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  Motor3_wReadCounter:
                                        (0299) _Motor3_wReadCounter:
                                        (0300)  wMotor3_ReadCounter:                            ; this name deprecated
                                        (0301) _wMotor3_ReadCounter:                            ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0694: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
0695: 5D 36    MOV   A,REG[0x36]        (0310)    mov   A, reg[Motor3_COMPARE_MSB_REG]          ; Save the Compare register on the stack
0697: 08       PUSH  A                  (0311)    push  A                                          ;
0698: 5D 32    MOV   A,REG[0x32]        (0312)    mov   A, reg[Motor3_COMPARE_LSB_REG]          ;
069A: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
069B: 41 33 FE AND   REG[0x33],0xFE     (0314)    Motor3_Stop_M                                 ; Disable the PWM function
069E: 71 10    OR    F,0x10             (0315)    M8C_SetBank1                                     ;
06A0: 5D 31    MOV   A,REG[0x31]        (0316)    mov   A, reg[Motor3_INPUT_LSB_REG]            ; save the LSB clock input setting
06A2: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
06A3: 62 31 00 MOV   REG[0x31],0x0      (0319)    mov   reg[Motor3_INPUT_LSB_REG], INPUT_REG_NULL
06A6: 70 EF    AND   F,0xEF             (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
06A8: 5D 34    MOV   A,REG[0x34]        (0321)    mov   A, reg[Motor3_COUNTER_MSB_REG]          ; DR2 <- DR0 (in the MSB block)
06AA: 5D 36    MOV   A,REG[0x36]        (0322)    mov   A, reg[Motor3_COMPARE_MSB_REG]          ; Stash the Count MSB on the stack
06AC: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
06AD: 5D 30    MOV   A,REG[0x30]        (0324)    mov   A, reg[Motor3_COUNTER_LSB_REG]          ; DR2 <- DR0 (in the LSB block)
06AF: 5D 32    MOV   A,REG[0x32]        (0325)    mov   A, reg[Motor3_COMPARE_LSB_REG]          ; Stash the Count LSB on the stack
06B1: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
06B2: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
06B4: 60 36    MOV   REG[0x36],A        (0328)    mov   reg[Motor3_COMPARE_MSB_REG], A          ;
06B6: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
06B8: 60 32    MOV   REG[0x32],A        (0330)    mov   reg[Motor3_COMPARE_LSB_REG], A          ;
06BA: 71 10    OR    F,0x10             (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
06BC: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
06BE: 60 31    MOV   REG[0x31],A        (0333)    mov   reg[Motor3_INPUT_LSB_REG], A            ;    and restore it
06C0: 70 EF    AND   F,0xEF             (0334)    M8C_SetBank0                                     ;
06C2: 43 33 01 OR    REG[0x33],0x1      (0335)    Motor3_Start_M                                ; Now re-enable the PWM function
06C5: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
06C6: 20       POP   X                  (0337)    pop   X                                          ;
06C7: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
06C9: 70 3F    AND   F,0x3F             
06CB: 71 C0    OR    F,0xC0             (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
06CD: 7F       RET                      (0340)    ret
(0341) 
(0342) .ENDSECTION
(0343) 
(0344) ; End of File Motor3.asm
FILE: lib\motor2int.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Motor2INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "Motor2.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Motor2_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Motor2_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Motor2_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070) 
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
06CE: 7E       RETI                     (0076)    reti
(0077) 
(0078) 
(0079) ; end of file Motor2INT.asm
FILE: lib\motor2.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Motor2.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "Motor2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Motor2_EnableInt
                                        (0030) export _Motor2_EnableInt
                                        (0031) export  Motor2_DisableInt
                                        (0032) export _Motor2_DisableInt
                                        (0033) export  Motor2_Start
                                        (0034) export _Motor2_Start
                                        (0035) export  Motor2_Stop
                                        (0036) export _Motor2_Stop
                                        (0037) export  Motor2_WritePeriod
                                        (0038) export _Motor2_WritePeriod
                                        (0039) export  Motor2_WritePulseWidth
                                        (0040) export _Motor2_WritePulseWidth
                                        (0041) export  Motor2_wReadPulseWidth
                                        (0042) export _Motor2_wReadPulseWidth
                                        (0043) export  Motor2_wReadCounter
                                        (0044) export _Motor2_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wMotor2_ReadPulseWidth    ; deprecated
                                        (0049) export _wMotor2_ReadPulseWidth    ; deprecated
                                        (0050) export  wMotor2_ReadCounter       ; deprecated
                                        (0051) export _wMotor2_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA servo_controller_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: Motor2_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  Motor2_EnableInt:
                                        (0091) _Motor2_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
06CF: 43 E1 08 OR    REG[0xE1],0x8      (0093)    Motor2_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
06D2: 7F       RET                      (0095)    ret
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: Motor2_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  Motor2_DisableInt:
                                        (0119) _Motor2_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
06D3: 41 E1 F7 AND   REG[0xE1],0xF7     (0121)    Motor2_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
06D6: 7F       RET                      (0123)    ret
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: Motor2_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  Motor2_Start:
                                        (0148) _Motor2_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
06D7: 43 2B 01 OR    REG[0x2B],0x1      (0150)    Motor2_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
06DA: 7F       RET                      (0152)    ret
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: Motor2_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  Motor2_Stop:
                                        (0176) _Motor2_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
06DB: 41 2B FE AND   REG[0x2B],0xFE     (0178)    Motor2_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
06DE: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: Motor2_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  Motor2_WritePeriod:
                                        (0206) _Motor2_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
06DF: 60 29    MOV   REG[0x29],A        (0208)    mov   reg[Motor2_PERIOD_LSB_REG], A
06E1: 5B       MOV   A,X                (0209)    mov   A, X
06E2: 60 2D    MOV   REG[0x2D],A        (0210)    mov   reg[Motor2_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
06E4: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: Motor2_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  Motor2_WritePulseWidth:
                                        (0235) _Motor2_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
06E5: 60 2A    MOV   REG[0x2A],A        (0237)    mov   reg[Motor2_COMPARE_LSB_REG], A
06E7: 5B       MOV   A,X                (0238)    mov   A, X
06E8: 60 2E    MOV   REG[0x2E],A        (0239)    mov   reg[Motor2_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
06EA: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: Motor2_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  Motor2_wReadPulseWidth:
                                        (0264) _Motor2_wReadPulseWidth:
                                        (0265)  wMotor2_ReadPulseWidth:                         ; this name deprecated
                                        (0266) _wMotor2_ReadPulseWidth:                         ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
06EB: 5D 2E    MOV   A,REG[0x2E]        (0268)    mov   A, reg[Motor2_COMPARE_MSB_REG]
06ED: 5C       MOV   X,A                (0269)    mov   X, A
06EE: 5D 2A    MOV   A,REG[0x2A]        (0270)    mov   A, reg[Motor2_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
06F0: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: Motor2_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  Motor2_wReadCounter:
                                        (0299) _Motor2_wReadCounter:
                                        (0300)  wMotor2_ReadCounter:                            ; this name deprecated
                                        (0301) _wMotor2_ReadCounter:                            ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
06F1: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
06F2: 5D 2E    MOV   A,REG[0x2E]        (0310)    mov   A, reg[Motor2_COMPARE_MSB_REG]          ; Save the Compare register on the stack
06F4: 08       PUSH  A                  (0311)    push  A                                          ;
06F5: 5D 2A    MOV   A,REG[0x2A]        (0312)    mov   A, reg[Motor2_COMPARE_LSB_REG]          ;
06F7: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
06F8: 41 2B FE AND   REG[0x2B],0xFE     (0314)    Motor2_Stop_M                                 ; Disable the PWM function
06FB: 71 10    OR    F,0x10             (0315)    M8C_SetBank1                                     ;
06FD: 5D 29    MOV   A,REG[0x29]        (0316)    mov   A, reg[Motor2_INPUT_LSB_REG]            ; save the LSB clock input setting
06FF: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0700: 62 29 00 MOV   REG[0x29],0x0      (0319)    mov   reg[Motor2_INPUT_LSB_REG], INPUT_REG_NULL
0703: 70 EF    AND   F,0xEF             (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0705: 5D 2C    MOV   A,REG[0x2C]        (0321)    mov   A, reg[Motor2_COUNTER_MSB_REG]          ; DR2 <- DR0 (in the MSB block)
0707: 5D 2E    MOV   A,REG[0x2E]        (0322)    mov   A, reg[Motor2_COMPARE_MSB_REG]          ; Stash the Count MSB on the stack
0709: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
070A: 5D 28    MOV   A,REG[0x28]        (0324)    mov   A, reg[Motor2_COUNTER_LSB_REG]          ; DR2 <- DR0 (in the LSB block)
070C: 5D 2A    MOV   A,REG[0x2A]        (0325)    mov   A, reg[Motor2_COMPARE_LSB_REG]          ; Stash the Count LSB on the stack
070E: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
070F: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0711: 60 2E    MOV   REG[0x2E],A        (0328)    mov   reg[Motor2_COMPARE_MSB_REG], A          ;
0713: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0715: 60 2A    MOV   REG[0x2A],A        (0330)    mov   reg[Motor2_COMPARE_LSB_REG], A          ;
0717: 71 10    OR    F,0x10             (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0719: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
071B: 60 29    MOV   REG[0x29],A        (0333)    mov   reg[Motor2_INPUT_LSB_REG], A            ;    and restore it
071D: 70 EF    AND   F,0xEF             (0334)    M8C_SetBank0                                     ;
071F: 43 2B 01 OR    REG[0x2B],0x1      (0335)    Motor2_Start_M                                ; Now re-enable the PWM function
0722: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0723: 20       POP   X                  (0337)    pop   X                                          ;
0724: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0726: 70 3F    AND   F,0x3F             
0728: 71 C0    OR    F,0xC0             (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
072A: 7F       RET                      (0340)    ret
(0341) 
(0342) .ENDSECTION
(0343) 
(0344) ; End of File Motor2.asm
FILE: lib\motor1int.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Motor1INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "Motor1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Motor1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Motor1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Motor1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070) 
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
072B: 7E       RETI                     (0076)    reti
(0077) 
(0078) 
(0079) ; end of file Motor1INT.asm
FILE: lib\motor1.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Motor1.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "Motor1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Motor1_EnableInt
                                        (0030) export _Motor1_EnableInt
                                        (0031) export  Motor1_DisableInt
                                        (0032) export _Motor1_DisableInt
                                        (0033) export  Motor1_Start
                                        (0034) export _Motor1_Start
                                        (0035) export  Motor1_Stop
                                        (0036) export _Motor1_Stop
                                        (0037) export  Motor1_WritePeriod
                                        (0038) export _Motor1_WritePeriod
                                        (0039) export  Motor1_WritePulseWidth
                                        (0040) export _Motor1_WritePulseWidth
                                        (0041) export  Motor1_wReadPulseWidth
                                        (0042) export _Motor1_wReadPulseWidth
                                        (0043) export  Motor1_wReadCounter
                                        (0044) export _Motor1_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wMotor1_ReadPulseWidth    ; deprecated
                                        (0049) export _wMotor1_ReadPulseWidth    ; deprecated
                                        (0050) export  wMotor1_ReadCounter       ; deprecated
                                        (0051) export _wMotor1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA servo_controller_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: Motor1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  Motor1_EnableInt:
                                        (0091) _Motor1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
072C: 43 E1 02 OR    REG[0xE1],0x2      (0093)    Motor1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
072F: 7F       RET                      (0095)    ret
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: Motor1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  Motor1_DisableInt:
                                        (0119) _Motor1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
0730: 41 E1 FD AND   REG[0xE1],0xFD     (0121)    Motor1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0733: 7F       RET                      (0123)    ret
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: Motor1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  Motor1_Start:
                                        (0148) _Motor1_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
0734: 43 23 01 OR    REG[0x23],0x1      (0150)    Motor1_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0737: 7F       RET                      (0152)    ret
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: Motor1_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  Motor1_Stop:
                                        (0176) _Motor1_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
0738: 41 23 FE AND   REG[0x23],0xFE     (0178)    Motor1_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
073B: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: Motor1_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  Motor1_WritePeriod:
                                        (0206) _Motor1_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
073C: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[Motor1_PERIOD_LSB_REG], A
073E: 5B       MOV   A,X                (0209)    mov   A, X
073F: 60 25    MOV   REG[0x25],A        (0210)    mov   reg[Motor1_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
0741: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: Motor1_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  Motor1_WritePulseWidth:
                                        (0235) _Motor1_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0742: 60 22    MOV   REG[0x22],A        (0237)    mov   reg[Motor1_COMPARE_LSB_REG], A
0744: 5B       MOV   A,X                (0238)    mov   A, X
0745: 60 26    MOV   REG[0x26],A        (0239)    mov   reg[Motor1_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0747: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: Motor1_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  Motor1_wReadPulseWidth:
                                        (0264) _Motor1_wReadPulseWidth:
                                        (0265)  wMotor1_ReadPulseWidth:                         ; this name deprecated
                                        (0266) _wMotor1_ReadPulseWidth:                         ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0748: 5D 26    MOV   A,REG[0x26]        (0268)    mov   A, reg[Motor1_COMPARE_MSB_REG]
074A: 5C       MOV   X,A                (0269)    mov   X, A
074B: 5D 22    MOV   A,REG[0x22]        (0270)    mov   A, reg[Motor1_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
074D: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: Motor1_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  Motor1_wReadCounter:
                                        (0299) _Motor1_wReadCounter:
                                        (0300)  wMotor1_ReadCounter:                            ; this name deprecated
                                        (0301) _wMotor1_ReadCounter:                            ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
074E: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
074F: 5D 26    MOV   A,REG[0x26]        (0310)    mov   A, reg[Motor1_COMPARE_MSB_REG]          ; Save the Compare register on the stack
0751: 08       PUSH  A                  (0311)    push  A                                          ;
0752: 5D 22    MOV   A,REG[0x22]        (0312)    mov   A, reg[Motor1_COMPARE_LSB_REG]          ;
0754: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0755: 41 23 FE AND   REG[0x23],0xFE     (0314)    Motor1_Stop_M                                 ; Disable the PWM function
0758: 71 10    OR    F,0x10             (0315)    M8C_SetBank1                                     ;
075A: 5D 21    MOV   A,REG[0x21]        (0316)    mov   A, reg[Motor1_INPUT_LSB_REG]            ; save the LSB clock input setting
075C: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
075D: 62 21 00 MOV   REG[0x21],0x0      (0319)    mov   reg[Motor1_INPUT_LSB_REG], INPUT_REG_NULL
0760: 70 EF    AND   F,0xEF             (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0762: 5D 24    MOV   A,REG[0x24]        (0321)    mov   A, reg[Motor1_COUNTER_MSB_REG]          ; DR2 <- DR0 (in the MSB block)
0764: 5D 26    MOV   A,REG[0x26]        (0322)    mov   A, reg[Motor1_COMPARE_MSB_REG]          ; Stash the Count MSB on the stack
0766: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0767: 5D 20    MOV   A,REG[0x20]        (0324)    mov   A, reg[Motor1_COUNTER_LSB_REG]          ; DR2 <- DR0 (in the LSB block)
0769: 5D 22    MOV   A,REG[0x22]        (0325)    mov   A, reg[Motor1_COMPARE_LSB_REG]          ; Stash the Count LSB on the stack
076B: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
076C: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
076E: 60 26    MOV   REG[0x26],A        (0328)    mov   reg[Motor1_COMPARE_MSB_REG], A          ;
0770: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0772: 60 22    MOV   REG[0x22],A        (0330)    mov   reg[Motor1_COMPARE_LSB_REG], A          ;
0774: 71 10    OR    F,0x10             (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0776: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0778: 60 21    MOV   REG[0x21],A        (0333)    mov   reg[Motor1_INPUT_LSB_REG], A            ;    and restore it
077A: 70 EF    AND   F,0xEF             (0334)    M8C_SetBank0                                     ;
077C: 43 23 01 OR    REG[0x23],0x1      (0335)    Motor1_Start_M                                ; Now re-enable the PWM function
077F: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0780: 20       POP   X                  (0337)    pop   X                                          ;
0781: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0783: 70 3F    AND   F,0x3F             
0785: 71 C0    OR    F,0xC0             (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0787: 7F       RET                      (0340)    ret
(0341) 
(0342) .ENDSECTION
(0343) 
(0344) ; End of File Motor1.asm
FILE: E:\ECE491~1\SERVO_~1\SERVO_~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) int j;
(0009) int pw1 = 999;
(0010) int pw2 = 1499;
(0011) int pw3 = 1999;
(0012) int motor = 1;
(0013) 
(0014) int convert(char* c);
(0015) 
(0016) void main(void)
_main|__text_start|_main:
  strPtr               --> X+0
    0788: 10       PUSH  X
    0789: 4F       MOV   X,SP
    078A: 38 02    ADD   SP,0x2
(0017) {
(0018) 	char * strPtr;                        // Parameter pointer
(0019) 	  
(0020)   
(0021) 	UART_CmdReset();                            // Turn on baud rate generator       
    078C: 10       PUSH  X
    078D: 7C 05 D8 LCALL 0x05D8
    0790: 20       POP   X
(0022) 	UART_IntCntl(UART_ENABLE_RX_INT);     // Enable RX interrupts  
    0791: 10       PUSH  X
    0792: 50 01    MOV   A,0x1
    0794: 7C 04 D5 LCALL 0x04D5
    0797: 20       POP   X
(0023) 	UART_Start(UART_PARITY_NONE);         // Enable UART  
    0798: 10       PUSH  X
    0799: 50 00    MOV   A,0x0
    079B: 7C 04 A6 LCALL 0x04A6
    079E: 20       POP   X
(0024) 	
(0025) 	M8C_EnableGInt ;                      // Turn on interrupts  
    079F: 71 01    OR    F,0x1
(0026) 	
(0027) 	
(0028) 	//Motor1_DisableInt();
(0029) 	//Motor2_DisableInt();
(0030) 	//Motor3_DisableInt();
(0031) 		
(0032) 	Motor1_Start();
    07A1: 10       PUSH  X
    07A2: 7C 07 34 LCALL 0x0734
(0033) 	Motor2_Start();
    07A5: 7C 06 D7 LCALL 0x06D7
(0034) 	Motor3_Start();
    07A8: 7C 06 7A LCALL 0x067A
    07AB: 20       POP   X
(0035) 	
(0036) 	//for(j = 0; j < 10000; j++);
(0037) 	UART_CPutString("\r\nServo controller intitiated.\r\n");  
    07AC: 10       PUSH  X
    07AD: 50 01    MOV   A,0x1
    07AF: 08       PUSH  A
    07B0: 50 CD    MOV   A,0xCD
    07B2: 5C       MOV   X,A
    07B3: 18       POP   A
    07B4: 7C 05 BD LCALL 0x05BD
    07B7: 20       POP   X
    07B8: 81 3D    JMP   0x08F6
(0038) 	
(0039) 	while (TRUE)
(0040) 	{
(0041) 		
(0042) 		if(UART_bCmdCheck()) 
    07BA: 10       PUSH  X
    07BB: 7C 05 EE LCALL 0x05EE
    07BE: 62 D0 00 MOV   REG[0xD0],0x0
    07C1: 20       POP   X
    07C2: 39 00    CMP   A,0x0
    07C4: A1 31    JZ    0x08F6
(0043) 		{                    // Wait for command    
(0044) 			if(strPtr = UART_szGetParam()) 
    07C6: 10       PUSH  X
    07C7: 7C 06 07 LCALL 0x0607
    07CA: 62 D0 00 MOV   REG[0xD0],0x0
    07CD: 53 26    MOV   [__r0],A
    07CF: 5A 25    MOV   [__r1],X
    07D1: 20       POP   X
    07D2: 51 25    MOV   A,[__r1]
    07D4: 54 01    MOV   [X+1],A
    07D6: 51 26    MOV   A,[__r0]
    07D8: 54 00    MOV   [X+0],A
    07DA: 3C 26 00 CMP   [__r0],0x0
    07DD: B0 06    JNZ   0x07E4
    07DF: 3C 25 00 CMP   [__r1],0x0
    07E2: A1 0E    JZ    0x08F1
(0045) 			{  
(0046) 				j = 0;// More than delimiter?  
    07E4: 62 D0 00 MOV   REG[0xD0],0x0
    07E7: 55 30 00 MOV   [j+1],0x0
    07EA: 55 2F 00 MOV   [j],0x0
(0047) 				UART_CPutString("Motor angles (1, 2, 3): \r\nValues\r\n<"); 
    07ED: 10       PUSH  X
    07EE: 50 01    MOV   A,0x1
    07F0: 08       PUSH  A
    07F1: 50 A9    MOV   A,0xA9
    07F3: 5C       MOV   X,A
    07F4: 18       POP   A
    07F5: 7C 05 BD LCALL 0x05BD
    07F8: 20       POP   X
(0048) 				pw1 = convert(strPtr);  
    07F9: 52 00    MOV   A,[X+0]
    07FB: 08       PUSH  A
    07FC: 52 01    MOV   A,[X+1]
    07FE: 08       PUSH  A
    07FF: 90 FC    CALL  _convert
    0801: 38 FE    ADD   SP,0xFE
    0803: 62 D0 00 MOV   REG[0xD0],0x0
    0806: 51 25    MOV   A,[__r1]
    0808: 08       PUSH  A
    0809: 51 26    MOV   A,[__r0]
    080B: 62 D0 00 MOV   REG[0xD0],0x0
    080E: 53 29    MOV   [pw1],A
    0810: 18       POP   A
    0811: 53 2A    MOV   [pw1+1],A
(0049) 				UART_PutString(strPtr);             // Print out command
    0813: 10       PUSH  X
    0814: 52 00    MOV   A,[X+0]
    0816: 08       PUSH  A
    0817: 52 01    MOV   A,[X+1]
    0819: 5C       MOV   X,A
    081A: 18       POP   A
    081B: 7C 05 57 LCALL 0x0557
    081E: 20       POP   X
(0050) 				UART_CPutString(">\r\n");   
    081F: 10       PUSH  X
    0820: 50 01    MOV   A,0x1
    0822: 08       PUSH  A
    0823: 50 A5    MOV   A,0xA5
    0825: 5C       MOV   X,A
    0826: 18       POP   A
    0827: 7C 05 BD LCALL 0x05BD
    082A: 20       POP   X
    082B: 80 7D    JMP   0x08A9
(0051) 				while(strPtr = UART_szGetParam()) 
(0052) 				{ // loop on each parameter  
(0053) 					if(j == 0)
    082D: 62 D0 00 MOV   REG[0xD0],0x0
    0830: 3C 2F 00 CMP   [j],0x0
    0833: B0 22    JNZ   0x0856
    0835: 3C 30 00 CMP   [j+1],0x0
    0838: B0 1D    JNZ   0x0856
(0054) 						pw2 = convert(strPtr);
    083A: 52 00    MOV   A,[X+0]
    083C: 08       PUSH  A
    083D: 52 01    MOV   A,[X+1]
    083F: 08       PUSH  A
    0840: 90 BB    CALL  _convert
    0842: 38 FE    ADD   SP,0xFE
    0844: 62 D0 00 MOV   REG[0xD0],0x0
    0847: 51 25    MOV   A,[__r1]
    0849: 08       PUSH  A
    084A: 51 26    MOV   A,[__r0]
    084C: 62 D0 00 MOV   REG[0xD0],0x0
    084F: 53 2B    MOV   [pw2],A
    0851: 18       POP   A
    0852: 53 2C    MOV   [pw2+1],A
    0854: 80 28    JMP   0x087D
(0055) 					else if(j == 1)
    0856: 62 D0 00 MOV   REG[0xD0],0x0
    0859: 3C 2F 00 CMP   [j],0x0
    085C: B0 20    JNZ   0x087D
    085E: 3C 30 01 CMP   [j+1],0x1
    0861: B0 1B    JNZ   0x087D
(0056) 						pw3 = convert(strPtr);
    0863: 52 00    MOV   A,[X+0]
    0865: 08       PUSH  A
    0866: 52 01    MOV   A,[X+1]
    0868: 08       PUSH  A
    0869: 90 92    CALL  _convert
    086B: 38 FE    ADD   SP,0xFE
    086D: 62 D0 00 MOV   REG[0xD0],0x0
    0870: 51 25    MOV   A,[__r1]
    0872: 08       PUSH  A
    0873: 51 26    MOV   A,[__r0]
    0875: 62 D0 00 MOV   REG[0xD0],0x0
    0878: 53 27    MOV   [pw3],A
    087A: 18       POP   A
    087B: 53 28    MOV   [pw3+1],A
(0057) 					UART_CPutString("   <");    
    087D: 10       PUSH  X
    087E: 50 01    MOV   A,0x1
    0880: 08       PUSH  A
    0881: 50 A0    MOV   A,0xA0
    0883: 5C       MOV   X,A
    0884: 18       POP   A
    0885: 7C 05 BD LCALL 0x05BD
    0888: 20       POP   X
(0058) 					UART_PutString(strPtr);          // Print each parameter    
    0889: 10       PUSH  X
    088A: 52 00    MOV   A,[X+0]
    088C: 08       PUSH  A
    088D: 52 01    MOV   A,[X+1]
    088F: 5C       MOV   X,A
    0890: 18       POP   A
    0891: 7C 05 57 LCALL 0x0557
    0894: 20       POP   X
(0059) 					UART_CPutString(">\r\n");  
    0895: 10       PUSH  X
    0896: 50 01    MOV   A,0x1
    0898: 08       PUSH  A
    0899: 50 A5    MOV   A,0xA5
    089B: 5C       MOV   X,A
    089C: 18       POP   A
    089D: 7C 05 BD LCALL 0x05BD
    08A0: 20       POP   X
(0060) 					j++;
    08A1: 62 D0 00 MOV   REG[0xD0],0x0
    08A4: 76 30    INC   [j+1]
    08A6: 0E 2F 00 ADC   [j],0x0
(0061) 				}   
    08A9: 10       PUSH  X
    08AA: 7C 06 07 LCALL 0x0607
    08AD: 62 D0 00 MOV   REG[0xD0],0x0
    08B0: 53 26    MOV   [__r0],A
    08B2: 5A 25    MOV   [__r1],X
    08B4: 20       POP   X
    08B5: 51 25    MOV   A,[__r1]
    08B7: 54 01    MOV   [X+1],A
    08B9: 51 26    MOV   A,[__r0]
    08BB: 54 00    MOV   [X+0],A
    08BD: 3C 26 00 CMP   [__r0],0x0
    08C0: BF 6C    JNZ   0x082D
    08C2: 3C 25 00 CMP   [__r1],0x0
    08C5: BF 67    JNZ   0x082D
(0062) 					
(0063) 				
(0064) 				Motor1_WritePulseWidth(pw1);
    08C7: 10       PUSH  X
    08C8: 62 D0 00 MOV   REG[0xD0],0x0
    08CB: 51 29    MOV   A,[pw1]
    08CD: 08       PUSH  A
    08CE: 51 2A    MOV   A,[pw1+1]
    08D0: 20       POP   X
    08D1: 7C 07 42 LCALL 0x0742
    08D4: 20       POP   X
(0065) 				Motor2_WritePulseWidth(pw2);
    08D5: 10       PUSH  X
    08D6: 62 D0 00 MOV   REG[0xD0],0x0
    08D9: 51 2B    MOV   A,[pw2]
    08DB: 08       PUSH  A
    08DC: 51 2C    MOV   A,[pw2+1]
    08DE: 20       POP   X
    08DF: 7C 06 E5 LCALL 0x06E5
    08E2: 20       POP   X
(0066) 				Motor3_WritePulseWidth(pw3);  
    08E3: 10       PUSH  X
    08E4: 62 D0 00 MOV   REG[0xD0],0x0
    08E7: 51 27    MOV   A,[pw3]
    08E9: 08       PUSH  A
    08EA: 51 28    MOV   A,[pw3+1]
    08EC: 20       POP   X
    08ED: 7C 06 88 LCALL 0x0688
    08F0: 20       POP   X
(0067) 			}   
(0068) 		UART_CmdReset();                          // Reset command buffer     
    08F1: 10       PUSH  X
    08F2: 7C 05 D8 LCALL 0x05D8
    08F5: 20       POP   X
(0069) 	}  
(0070) 
(0071) 	}
    08F6: 8E C3    JMP   0x07BA
    08F8: 38 FE    ADD   SP,0xFE
    08FA: 20       POP   X
    08FB: 8F FF    JMP   0x08FB
(0072) }
(0073) 
(0074) int convert(char* c)
(0075) {
_convert:
  check                --> X+4
  result               --> X+2
  i                    --> X+0
  c                    --> X-5
    08FD: 10       PUSH  X
    08FE: 4F       MOV   X,SP
    08FF: 38 05    ADD   SP,0x5
(0076) 	int result = 0;
    0901: 56 03 00 MOV   [X+3],0x0
    0904: 56 02 00 MOV   [X+2],0x0
(0077) 	int i = 0;
    0907: 56 01 00 MOV   [X+1],0x0
    090A: 56 00 00 MOV   [X+0],0x0
    090D: 80 FC    JMP   0x0A0A
(0078) 	char check;
(0079) 	while(check = c[i])
(0080) 	{
(0081) 		if(i == 0)
    090F: 3D 00 00 CMP   [X+0],0x0
    0912: B0 42    JNZ   0x0955
    0914: 3D 01 00 CMP   [X+1],0x0
    0917: B0 3D    JNZ   0x0955
(0082) 			result += (((int)c[i]) - 48)*1000;
    0919: 62 D0 00 MOV   REG[0xD0],0x0
    091C: 52 01    MOV   A,[X+1]
    091E: 03 FC    ADD   A,[X-4]
    0920: 53 25    MOV   [__r1],A
    0922: 52 00    MOV   A,[X+0]
    0924: 0B FB    ADC   A,[X-5]
    0926: 60 D4    MOV   REG[0xD4],A
    0928: 3E 25    MVI   A,[__r1]
    092A: 53 25    MOV   [__r1],A
    092C: 50 00    MOV   A,0x0
    092E: 08       PUSH  A
    092F: 51 25    MOV   A,[__r1]
    0931: 08       PUSH  A
    0932: 50 03    MOV   A,0x3
    0934: 08       PUSH  A
    0935: 50 E8    MOV   A,0xE8
    0937: 08       PUSH  A
    0938: 7C 0B 29 LCALL __mul16
    093B: 38 FC    ADD   SP,0xFC
    093D: 51 24    MOV   A,[__rX]
    093F: 53 25    MOV   [__r1],A
    0941: 51 23    MOV   A,[__rY]
    0943: 53 26    MOV   [__r0],A
    0945: 16 25 80 SUB   [__r1],0x80
    0948: 1E 26 BB SBB   [__r0],0xBB
    094B: 51 25    MOV   A,[__r1]
    094D: 05 03    ADD   [X+3],A
    094F: 51 26    MOV   A,[__r0]
    0951: 0D 02    ADC   [X+2],A
    0953: 80 B1    JMP   0x0A05
(0083) 		else if(i == 1)
    0955: 3D 00 00 CMP   [X+0],0x0
    0958: B0 42    JNZ   0x099B
    095A: 3D 01 01 CMP   [X+1],0x1
    095D: B0 3D    JNZ   0x099B
(0084) 			result += (((int)c[i]) - 48)*100;
    095F: 62 D0 00 MOV   REG[0xD0],0x0
    0962: 52 01    MOV   A,[X+1]
    0964: 03 FC    ADD   A,[X-4]
    0966: 53 25    MOV   [__r1],A
    0968: 52 00    MOV   A,[X+0]
    096A: 0B FB    ADC   A,[X-5]
    096C: 60 D4    MOV   REG[0xD4],A
    096E: 3E 25    MVI   A,[__r1]
    0970: 53 25    MOV   [__r1],A
    0972: 50 00    MOV   A,0x0
    0974: 08       PUSH  A
    0975: 51 25    MOV   A,[__r1]
    0977: 08       PUSH  A
    0978: 50 00    MOV   A,0x0
    097A: 08       PUSH  A
    097B: 50 64    MOV   A,0x64
    097D: 08       PUSH  A
    097E: 7C 0B 29 LCALL __mul16
    0981: 38 FC    ADD   SP,0xFC
    0983: 51 24    MOV   A,[__rX]
    0985: 53 25    MOV   [__r1],A
    0987: 51 23    MOV   A,[__rY]
    0989: 53 26    MOV   [__r0],A
    098B: 16 25 C0 SUB   [__r1],0xC0
    098E: 1E 26 12 SBB   [__r0],0x12
    0991: 51 25    MOV   A,[__r1]
    0993: 05 03    ADD   [X+3],A
    0995: 51 26    MOV   A,[__r0]
    0997: 0D 02    ADC   [X+2],A
    0999: 80 6B    JMP   0x0A05
(0085) 		else if(i == 2)
    099B: 3D 00 00 CMP   [X+0],0x0
    099E: B0 42    JNZ   0x09E1
    09A0: 3D 01 02 CMP   [X+1],0x2
    09A3: B0 3D    JNZ   0x09E1
(0086) 			result += (((int)c[i]) - 48)*10;
    09A5: 62 D0 00 MOV   REG[0xD0],0x0
    09A8: 52 01    MOV   A,[X+1]
    09AA: 03 FC    ADD   A,[X-4]
    09AC: 53 25    MOV   [__r1],A
    09AE: 52 00    MOV   A,[X+0]
    09B0: 0B FB    ADC   A,[X-5]
    09B2: 60 D4    MOV   REG[0xD4],A
    09B4: 3E 25    MVI   A,[__r1]
    09B6: 53 25    MOV   [__r1],A
    09B8: 50 00    MOV   A,0x0
    09BA: 08       PUSH  A
    09BB: 51 25    MOV   A,[__r1]
    09BD: 08       PUSH  A
    09BE: 50 00    MOV   A,0x0
    09C0: 08       PUSH  A
    09C1: 50 0A    MOV   A,0xA
    09C3: 08       PUSH  A
    09C4: 7C 0B 29 LCALL __mul16
    09C7: 38 FC    ADD   SP,0xFC
    09C9: 51 24    MOV   A,[__rX]
    09CB: 53 25    MOV   [__r1],A
    09CD: 51 23    MOV   A,[__rY]
    09CF: 53 26    MOV   [__r0],A
    09D1: 16 25 E0 SUB   [__r1],0xE0
    09D4: 1E 26 01 SBB   [__r0],0x1
    09D7: 51 25    MOV   A,[__r1]
    09D9: 05 03    ADD   [X+3],A
    09DB: 51 26    MOV   A,[__r0]
    09DD: 0D 02    ADC   [X+2],A
    09DF: 80 25    JMP   0x0A05
(0087) 		else
(0088) 			result += (((int)c[i]) - 48);
    09E1: 62 D0 00 MOV   REG[0xD0],0x0
    09E4: 52 01    MOV   A,[X+1]
    09E6: 03 FC    ADD   A,[X-4]
    09E8: 53 25    MOV   [__r1],A
    09EA: 52 00    MOV   A,[X+0]
    09EC: 0B FB    ADC   A,[X-5]
    09EE: 60 D4    MOV   REG[0xD4],A
    09F0: 3E 25    MVI   A,[__r1]
    09F2: 53 25    MOV   [__r1],A
    09F4: 55 26 00 MOV   [__r0],0x0
    09F7: 16 25 30 SUB   [__r1],0x30
    09FA: 1E 26 00 SBB   [__r0],0x0
    09FD: 51 25    MOV   A,[__r1]
    09FF: 05 03    ADD   [X+3],A
    0A01: 51 26    MOV   A,[__r0]
    0A03: 0D 02    ADC   [X+2],A
(0089) 			
(0090) 		i++;
    0A05: 77 01    INC   [X+1]
    0A07: 0F 00 00 ADC   [X+0],0x0
(0091) 	}
    0A0A: 62 D0 00 MOV   REG[0xD0],0x0
    0A0D: 52 01    MOV   A,[X+1]
    0A0F: 03 FC    ADD   A,[X-4]
    0A11: 53 25    MOV   [__r1],A
    0A13: 52 00    MOV   A,[X+0]
    0A15: 0B FB    ADC   A,[X-5]
    0A17: 60 D4    MOV   REG[0xD4],A
    0A19: 3E 25    MVI   A,[__r1]
    0A1B: 53 26    MOV   [__r0],A
    0A1D: 54 04    MOV   [X+4],A
    0A1F: 39 00    CMP   A,0x0
    0A21: BE ED    JNZ   0x090F
(0092) 	if (i == 1)
    0A23: 3D 00 00 CMP   [X+0],0x0
    0A26: B0 22    JNZ   0x0A49
    0A28: 3D 01 01 CMP   [X+1],0x1
    0A2B: B0 1D    JNZ   0x0A49
(0093) 		result = result/1000;
    0A2D: 50 03    MOV   A,0x3
    0A2F: 08       PUSH  A
    0A30: 50 E8    MOV   A,0xE8
    0A32: 08       PUSH  A
    0A33: 52 02    MOV   A,[X+2]
    0A35: 08       PUSH  A
    0A36: 52 03    MOV   A,[X+3]
    0A38: 08       PUSH  A
    0A39: 62 D0 00 MOV   REG[0xD0],0x0
    0A3C: 7C 0A A2 LCALL __divmod_16X16_16
    0A3F: 18       POP   A
    0A40: 54 03    MOV   [X+3],A
    0A42: 18       POP   A
    0A43: 54 02    MOV   [X+2],A
    0A45: 38 FE    ADD   SP,0xFE
    0A47: 80 4B    JMP   0x0A93
(0094) 	else if (i == 2)
    0A49: 3D 00 00 CMP   [X+0],0x0
    0A4C: B0 22    JNZ   0x0A6F
    0A4E: 3D 01 02 CMP   [X+1],0x2
    0A51: B0 1D    JNZ   0x0A6F
(0095) 		result = result/100;
    0A53: 50 00    MOV   A,0x0
    0A55: 08       PUSH  A
    0A56: 50 64    MOV   A,0x64
    0A58: 08       PUSH  A
    0A59: 52 02    MOV   A,[X+2]
    0A5B: 08       PUSH  A
    0A5C: 52 03    MOV   A,[X+3]
    0A5E: 08       PUSH  A
    0A5F: 62 D0 00 MOV   REG[0xD0],0x0
    0A62: 7C 0A A2 LCALL __divmod_16X16_16
    0A65: 18       POP   A
    0A66: 54 03    MOV   [X+3],A
    0A68: 18       POP   A
    0A69: 54 02    MOV   [X+2],A
    0A6B: 38 FE    ADD   SP,0xFE
    0A6D: 80 25    JMP   0x0A93
(0096) 	else if (i == 3)
    0A6F: 3D 00 00 CMP   [X+0],0x0
    0A72: B0 20    JNZ   0x0A93
    0A74: 3D 01 03 CMP   [X+1],0x3
    0A77: B0 1B    JNZ   0x0A93
(0097) 		result = result/10;
    0A79: 50 00    MOV   A,0x0
    0A7B: 08       PUSH  A
    0A7C: 50 0A    MOV   A,0xA
    0A7E: 08       PUSH  A
    0A7F: 52 02    MOV   A,[X+2]
    0A81: 08       PUSH  A
    0A82: 52 03    MOV   A,[X+3]
    0A84: 08       PUSH  A
    0A85: 62 D0 00 MOV   REG[0xD0],0x0
    0A88: 7C 0A A2 LCALL __divmod_16X16_16
    0A8B: 18       POP   A
    0A8C: 54 03    MOV   [X+3],A
    0A8E: 18       POP   A
    0A8F: 54 02    MOV   [X+2],A
    0A91: 38 FE    ADD   SP,0xFE
(0098) 	return result;
    0A93: 62 D0 00 MOV   REG[0xD0],0x0
    0A96: 52 03    MOV   A,[X+3]
    0A98: 53 25    MOV   [__r1],A
    0A9A: 52 02    MOV   A,[X+2]
    0A9C: 53 26    MOV   [__r0],A
    0A9E: 38 FB    ADD   SP,0xFB
    0AA0: 20       POP   X
(0099) }
FILE: <library>
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.1127.0

Copyright (C) 1994 - 2009 ImageCraft Creations Inc.
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Release version 7.02.004
